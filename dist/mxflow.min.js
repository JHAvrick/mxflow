/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["mxflow"] = factory();
	else
		root["mxflow"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/flow-util.ts":
/*!**************************!*\
  !*** ./src/flow-util.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"swapValues\": () => (/* binding */ swapValues),\n/* harmony export */   \"clone\": () => (/* binding */ clone),\n/* harmony export */   \"clamp\": () => (/* binding */ clamp),\n/* harmony export */   \"distance\": () => (/* binding */ distance),\n/* harmony export */   \"midpoint\": () => (/* binding */ midpoint),\n/* harmony export */   \"throttle\": () => (/* binding */ throttle),\n/* harmony export */   \"flatten\": () => (/* binding */ flatten),\n/* harmony export */   \"resolveProperty\": () => (/* binding */ resolveProperty),\n/* harmony export */   \"assignProperty\": () => (/* binding */ assignProperty),\n/* harmony export */   \"getBezierPath\": () => (/* binding */ getBezierPath),\n/* harmony export */   \"intersectRect\": () => (/* binding */ intersectRect),\n/* harmony export */   \"DefaultNodeTemplate\": () => (/* binding */ DefaultNodeTemplate),\n/* harmony export */   \"parseNodeTemplate\": () => (/* binding */ parseNodeTemplate),\n/* harmony export */   \"createNode\": () => (/* binding */ createNode),\n/* harmony export */   \"getEdgeCompositeKey\": () => (/* binding */ getEdgeCompositeKey),\n/* harmony export */   \"getLinkCompositeKey\": () => (/* binding */ getLinkCompositeKey),\n/* harmony export */   \"createEdge\": () => (/* binding */ createEdge),\n/* harmony export */   \"getEdgeLatchPos\": () => (/* binding */ getEdgeLatchPos),\n/* harmony export */   \"createLink\": () => (/* binding */ createLink),\n/* harmony export */   \"generateFlowEl\": () => (/* binding */ generateFlowEl),\n/* harmony export */   \"addItemClass\": () => (/* binding */ addItemClass),\n/* harmony export */   \"removeItemClass\": () => (/* binding */ removeItemClass),\n/* harmony export */   \"applyNodePosition\": () => (/* binding */ applyNodePosition),\n/* harmony export */   \"applyLinkPosition\": () => (/* binding */ applyLinkPosition),\n/* harmony export */   \"applyAllLinkPositions\": () => (/* binding */ applyAllLinkPositions)\n/* harmony export */ });\n/* harmony import */ var types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! types/flow.types.v2 */ \"./src/types/flow.types.v2.ts\");\n/* harmony import */ var _helpers_background__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/background */ \"./src/helpers/background.ts\");\n\n\n/**\r\n * Generates a curved SVG bezier path. The severity of the curve is controlled by the weight parameter.\r\n *\r\n * See https://codepen.io/GrinninColossus/pen/PopzzNE?editors=1010\r\n */\n\nconst getBezierPath = (x1, y1, x2, y2, weight) => {\n  let dx = Math.abs(x2 - x1) * weight;\n  let bx2 = Math.max(x1, x2) - dx;\n  var bx3 = Math.min(x1, x2) + dx;\n  return `M${x1} ${y1} C ${bx2} ${y1} ${bx3} ${y2} ${x2} ${y2}`;\n};\n\nconst swapValues = (var1, var2) => [var1, var2];\n/**\r\n * Clone simpe objects\r\n */\n\n\nconst clone = obj => JSON.parse(JSON.stringify(obj));\n/**\r\n * Clamp value between min/max\r\n */\n\n\nconst clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n/**\r\n * Get distance between two points.\r\n */\n\n\nconst distance = (x1, y1, x2, y2) => {\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n};\n/**\r\n * Creates a simple throttled function\r\n */\n\n\nconst throttle = (callback, limit) => {\n  var waiting = false;\n  return function () {\n    if (!waiting) {\n      callback(...arguments);\n      waiting = true;\n      setTimeout(function () {\n        waiting = false;\n      }, limit);\n    }\n  };\n};\n/**\r\n * Get midpoint between two points\r\n */\n\n\nconst midpoint = (x1, y1, x2, y2) => {\n  return [(x1 + x2) / 2, (y1 + y2) / 2];\n};\n\nconst flatten = function (obj) {\n  let roots = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let sep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';\n  return Object.keys(obj).reduce((memo, prop) => Object.assign({}, memo, Object.prototype.toString.call(obj[prop]) === '[object Object]' // keep working if value is an object\n  ? flatten(obj[prop], roots.concat([prop]), sep) // include current prop and value and prefix prop with the roots\n  : {\n    [roots.concat([prop]).join(sep)]: obj[prop]\n  }), {});\n};\n/**\r\n * Resolve a property on an object using an accessor string.\r\n */\n\n\nconst resolveProperty = (path, obj) => {\n  return path.split('.').reduce((prev, curr) => {\n    return prev ? prev[curr] : null;\n  }, obj || self);\n};\n/**\r\n * Assigns value to property using accessor string. If the given path does not exist,\r\n * it is created.\r\n */\n\n\nconst assignProperty = (path, obj, val) => {\n  let parts = path.split('.');\n\n  for (let i = 0; i < parts.length - 1; i++) {\n    if (obj[parts[i]] == null || obj[parts[i]] == undefined) {\n      obj[parts[i]] = {};\n    }\n\n    obj = obj[parts[i]];\n  }\n\n  obj[parts[parts.length - 1]] = val;\n};\n/**\r\n * Determines whether to rects intersect\r\n *\r\n * @param r1\r\n * @param r2\r\n * @returns\r\n */\n\n\nconst intersectRect = (r1, r2) => {\n  return !(r2.left > r1.right || r2.right < r1.left || r2.top > r1.bottom || r2.bottom < r1.top);\n};\n\nconst enumFromStringValue = (enm, value) => {\n  return Object.values(enm).includes(value) ? value : undefined;\n};\n\nconst DefaultNodeTemplate =\n/* HTML */\n`\n    <div ${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.NodeTemplate}>\n        <ul ${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.EdgeGroup}=\"inputs\" ${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.EdgeLatch}=\"center\">\n            <!-- Input Edges Dynamically Populated -->\n        </ul>\n        <div ${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.NodeContent}>\n            <!-- Node Content as Provided by User -->\n        </div>\n        <ul ${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.EdgeGroup}=\"outputs\" ${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.EdgeLatch}=\"center\">\n            <!-- Output Edges Dynamically Populated -->\n        </ul>\n    </div>\n`;\n\nconst buildEdgeGroups = dom => {\n  let edgeGroups = new Map();\n  let groupNodes = dom.querySelectorAll(`ul[${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.EdgeGroup}]`);\n  groupNodes.forEach(node => {\n    var _a;\n\n    let key = node.getAttribute(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.EdgeGroup);\n    let latchPos = enumFromStringValue(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.LinkLatchPosition, (_a = node.getAttribute(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.EdgeLatch)) !== null && _a !== void 0 ? _a : 'center');\n    node.classList.add(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.EdgeGroup);\n    edgeGroups.set(key, {\n      groupKey: key,\n      groupEl: node,\n      latchPos: latchPos !== null && latchPos !== void 0 ? latchPos : types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.LinkLatchPosition.CENTER\n    });\n  });\n  return edgeGroups;\n};\n\nconst parseNodeTemplate = template => {\n  let dom = new DOMParser().parseFromString(template, \"text/html\"); //Get and create node\n\n  let el = dom.querySelector(`*[${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.NodeTemplate}]`);\n  let content = dom.querySelector(`*[${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.NodeContent}]`); //Ensure all template elements have been included\n\n  if (!el\n  /*|| !inputs || !outputs */\n  || !content) {\n    throw new Error('Node template is missing required element.');\n  } //Ensure all template elements are of the correct type\n\n\n  if (!(el instanceof HTMLElement)\n  /* || !(inputs instanceof HTMLUListElement) || !(outputs instanceof HTMLUListElement) */\n  || !(content instanceof HTMLElement)) {\n    throw new Error('One more more template elements is of the incorrect element type.');\n  }\n\n  return [dom, el, content];\n};\n\nconst applyNodeAttributes = (el, key, z) => {\n  el.setAttribute(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.Type, types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowItemType.Node);\n  el.setAttribute(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.Key, key);\n  el.setAttribute('draggable', \"false\");\n\n  el.ondragstart = e => e.preventDefault();\n\n  el.style.display = 'inline-flex';\n  el.style.justifyContent = 'space-between';\n  el.style.touchAction = 'none';\n  el.style.userSelect = 'none';\n  el.style.pointerEvents = 'all';\n  el.style.position = 'absolute';\n  el.style.left = \"0px\";\n  el.style.top = \"0px\";\n  el.style.zIndex = z.toString();\n};\n\nconst createNode = opts => {\n  var _a, _b, _c, _d;\n\n  let template = (_a = opts.template) !== null && _a !== void 0 ? _a : DefaultNodeTemplate;\n  let dom, el, content;\n  [dom, el, content] = parseNodeTemplate(template); //Ensure all template elements have been included\n\n  if (!el\n  /*|| !inputs || !outputs */\n  || !content) {\n    throw new Error('Node template is missing required element.');\n  } //Ensure all template elements are of the correct type\n\n\n  if (!(el instanceof HTMLElement)\n  /* || !(inputs instanceof HTMLUListElement) || !(outputs instanceof HTMLUListElement) */\n  || !(content instanceof HTMLElement)) {\n    throw new Error('One more more template element is of the incorrect element type.');\n  }\n\n  if (el instanceof HTMLElement) {\n    applyNodeAttributes(el, opts.key, opts.z);\n  } else {\n    throw new Error('No parent HTMLElement found in Node template (w/ class \"mx-flow-node\").');\n  }\n\n  el.classList.add(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Node);\n  content.classList.add(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.NodeContent); //Add any custom classes - these are provided by the user\n\n  let userClass = [];\n\n  if (opts.nodeClass && opts.nodeClass.length > 0) {\n    if (Array.isArray(opts.nodeClass)) {\n      el.classList.add(...opts.nodeClass);\n      userClass = opts.nodeClass;\n    } else {\n      el.classList.add(opts.nodeClass);\n      userClass = [opts.nodeClass];\n    }\n  }\n\n  if (opts.width) el.style.width = typeof opts.width === 'number' ? `${opts.width}px` : opts.width;\n  if (opts.height) el.style.height = typeof opts.height === 'number' ? `${opts.height}px` : opts.height;\n  return {\n    type: types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowItemType.Node,\n    template: template,\n    key: opts.key,\n    el: el,\n    contentEl: content,\n    edgeGroups: buildEdgeGroups(dom),\n    x: opts.x,\n    y: opts.y,\n    z: opts.z,\n    deltaX: 0,\n    deltaY: 0,\n    width: (_b = opts.width) !== null && _b !== void 0 ? _b : 'auto',\n    height: (_c = opts.height) !== null && _c !== void 0 ? _c : 'auto',\n    data: (_d = opts.data) !== null && _d !== void 0 ? _d : {},\n    class: userClass\n  };\n};\n\nconst getEdgeCompositeKey = edge => {\n  return `${edge.nodeKey}:${edge.edgeKey}`;\n};\n\nconst createEdge = (node, groupKey, edgeKey, edgeClass) => {\n  let group = node.edgeGroups.get(groupKey);\n\n  if (!group) {\n    throw new Error(`createEdge(): Unable to find group with key \"${groupKey}\" in node template.`);\n  }\n\n  let el = document.createElement('li');\n  el.classList.add(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Edge);\n  el.setAttribute(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.Type, types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowItemType.Edge);\n  el.setAttribute(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.Key, `${node.key}:${edgeKey}`);\n  el.setAttribute('draggable', \"false\");\n\n  el.ondragstart = e => e.preventDefault();\n\n  if (edgeClass && edgeClass.length > 0) {\n    el.classList.add(edgeClass);\n  }\n\n  return {\n    type: types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowItemType.Edge,\n    key: `${node.key}:${edgeKey}`,\n    group: group,\n    nodeKey: node.key,\n    edgeKey: edgeKey,\n    el: el,\n    data: {},\n    class: edgeClass !== null && edgeClass !== void 0 ? edgeClass : ''\n  };\n};\n/**\r\n * Given an edge, returns it's latch position as defined by its edge group.\r\n *\r\n * @param edge - The target Edge\r\n * @param offsetX - X axis offset to factor in\r\n * @param offsetY - Y axis offset to factor in\r\n * @returns\r\n */\n\n\nconst getEdgeLatchPos = function (edge) {\n  let offsetX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let offsetY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let rect = edge.el.getBoundingClientRect();\n\n  switch (edge.group.latchPos.toString()) {\n    case 'top':\n      return {\n        x: rect.left - offsetX + rect.width / 2,\n        y: rect.top - offsetY\n      };\n\n    case 'right':\n      return {\n        x: rect.left - offsetX + rect.width,\n        y: rect.top - offsetY + rect.height / 2\n      };\n\n    case 'bottom':\n      return {\n        x: rect.left - offsetX + rect.width / 2,\n        y: rect.top - offsetY + rect.height\n      };\n\n    case 'left':\n      return {\n        x: rect.left - offsetX,\n        y: rect.top - offsetY + rect.height / 2\n      };\n\n    case 'center':\n    default:\n      return {\n        x: rect.left - offsetX + rect.width / 2,\n        y: rect.top - offsetY + rect.height / 2\n      };\n  }\n};\n\nconst getLinkCompositeKey = opts => {\n  return `${opts.fromNode}:${opts.fromEdge}:${opts.toNode}:${opts.toEdge}`;\n};\n\nconst createLink = (opts, groupClass) => {\n  let key = getLinkCompositeKey(opts);\n  let band1 = document.createElementNS(\"http://www.w3.org/2000/svg\", 'path');\n  band1.classList.add(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.LinkBand1);\n  band1.style.pointerEvents = 'auto';\n  let band2 = document.createElementNS(\"http://www.w3.org/2000/svg\", 'path');\n  band2.classList.add(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.LinkBand2);\n  band2.style.pointerEvents = 'none';\n  let band3 = document.createElementNS(\"http://www.w3.org/2000/svg\", 'path');\n  band3.classList.add(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.LinkBand3);\n  band3.style.pointerEvents = 'none';\n  let text = document.createElementNS(\"http://www.w3.org/2000/svg\", 'text');\n  text.textContent = 'Label';\n  text.style.color = 'white';\n  text.setAttribute('width', \"300px\");\n  text.setAttribute('height', \"300px\");\n  text.setAttribute('textAnchor', 'middle');\n  let labelPath = document.createElementNS(\"http://www.w3.org/2000/svg\", 'textPath');\n  labelPath.style.pointerEvents = 'none';\n  text.appendChild(labelPath);\n  let group = document.createElementNS(\"http://www.w3.org/2000/svg\", 'g');\n  group.setAttribute(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.Type, types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowItemType.Link);\n  group.setAttribute(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.Key, key);\n  group.classList.add(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Link);\n  group.style.pointerEvents = 'none';\n  group.setAttribute('draggable', \"false\");\n\n  group.ondragstart = e => e.preventDefault();\n\n  group.appendChild(band1);\n  group.appendChild(band2);\n  group.appendChild(band3);\n  group.appendChild(text);\n\n  if (groupClass && groupClass.length > 0) {\n    group.classList.add(groupClass);\n  }\n\n  return {\n    type: types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowItemType.Link,\n    key: key,\n    fromNode: opts.fromNode,\n    fromEdge: opts.fromEdge,\n    toNode: opts.toNode,\n    toEdge: opts.toEdge,\n    el: group,\n    band1: band1,\n    band2: band2,\n    band3: band3,\n    labelEl: labelPath,\n    data: {}\n  };\n};\n\nconst generateFlowEl = (targetEl, opts) => {\n  let id = 'mxflow-instance-' + Date.now();\n  let bg = opts.background.html;\n\n  if (opts.background.type === 'grid' || opts.background.type === 'dots') {\n    bg = (0,_helpers_background__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(opts.background.type, opts.background.size, opts.background.radius);\n  }\n\n  targetEl.insertAdjacentHTML('afterbegin',\n  /* HTML */\n  `\n        <div id=\"${id}\" class=\"${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Container}\"\n            tabindex=\"1\" \n            style=\"position:relative; display:block; width:100%; height:100%; overflow:hidden; pointer-events:auto; padding:0px; outline:none\"\n            ondragstart=\"event.preventDefault()\">\n            <svg style=\"position:absolute; left:0px; top:0px; width:100%; height:100%; pointer-events:none; padding: 0px; z-index:1000;\">\n                <rect class=\"${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Lasso}\" \n                    ondragstart=\"event.preventDefault()\"\n                    style=\"position:absolute; display:none; z-index: 3; pointer-events:none;\">\n                </rect>\n            </svg>\n\n            <!-- <div class=\"${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Lasso}\"\n                ondragstart=\"event.preventDefault()\"\n                style=\"position:absolute; display:none; z-index: 3; pointer-events:none;\">\n            </div> -->\n            <div class=\"${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Context}\"\n                ondragstart=\"event.preventDefault()\"\n                style=\"display:none; position:absolute; z-index: 10;\">\n                <!-- Context Menu Populated Here -->\n            </div>\n            <div class=\"${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Root}\"\n                ${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.Type}=\"graph\"\n                ${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.Key}=\"graph\"\n                ondragstart=\"event.preventDefault()\"\n                style=\"position:relative; height:${opts.height}px; width:${opts.width}px; pointer-events:auto; transform-origin: 0 0; touch-action: none;\">\n\n                <div class=\"${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Background}\" style=\"width:100%;height:100%;display:${opts.background.type === 'none' ? 'none' : 'block'};\">\n                    ${bg}\n                </div>\n                <svg class=\"${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Links}\" \n                        ondragstart=\"event.preventDefault()\"\n                        style=\"position:absolute; left:0px; top:0px; width:100%; height:100%; pointer-events:none; padding: 0px;\">\n                        <!-- Links Populated Here -->\n                </svg>\n                <svg class=\"${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.GhostLinks}\" \n                     ondragstart=\"event.preventDefault()\"\n                     style=\"position:absolute; left:0px; top:0px; width:100%; height:100%; pointer-events:none; padding: 0px; z-index:1000;\">\n                     <g style=\"position:absolute; pointer-events:none; overflow:visible; \">\n                        <path class=\"${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.GhostLink}\" style=\"display:none;\"></path>\n                     </g>\n                </svg>\n                <div class=\"${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Nodes}\">\n                    <!-- Nodes Populated Here -->\n                </div>\n            </div>\n        </div>\n    `);\n  return {\n    instanceId: id,\n    containerEl: targetEl.querySelector(\".\" + types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Container),\n    lassoEl: targetEl.querySelector(\".\" + types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Lasso),\n    contextEl: targetEl.querySelector(\".\" + types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Context),\n    rootEl: targetEl.querySelector(\".\" + types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Root),\n    bgEl: targetEl.querySelector('.' + types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Background),\n    nodeContainerEl: targetEl.querySelector(\".\" + types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Nodes),\n    linkContainerEl: targetEl.querySelector(\".\" + types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Links),\n    ghostLinkContainerEl: targetEl.querySelector(\".\" + types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.GhostLinks),\n    ghostLinkEl: targetEl.querySelector(\".\" + types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.GhostLink)\n  };\n};\n\nconst addItemClass = (item, c) => {\n  switch (true) {\n    case Array.isArray(item):\n      item.forEach(item => item.el.classList.add(c));\n      break;\n\n    case item instanceof Map:\n      item.forEach(item => item.el.classList.add(c));\n      break;\n\n    default:\n      item.el.classList.add(c);\n  }\n};\n\nconst removeItemClass = (item, c) => {\n  switch (true) {\n    case Array.isArray(item):\n      item.forEach(item => item.el.classList.remove(c));\n      break;\n\n    case item instanceof Map:\n      item.forEach(item => item.el.classList.remove(c));\n      break;\n\n    default:\n      item.el.classList.remove(c);\n  }\n};\n\nconst applyNodePosition = node => {\n  node.el.style.transform = `translate(${node.x + node.deltaX}px, ${node.y + node.deltaY}px)`;\n  return node;\n};\n\nfunction _getQBezierValue(t, p1, p2, p3) {\n  var iT = 1 - t;\n  return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;\n}\n\nfunction getQuadraticCurvePoint(startX, startY, cpX, cpY, endX, endY, position) {\n  return {\n    x: _getQBezierValue(position, startX, cpX, endX),\n    y: _getQBezierValue(position, startY, cpY, endY)\n  };\n}\n\nconst applyLinkPosition = (api, link) => {\n  var _a;\n\n  let transform = api.state.transform;\n  let fromEdge = api.state.edges.get(`${link.fromNode}:${link.fromEdge}`);\n  let toEdge = api.state.edges.get(`${link.toNode}:${link.toEdge}`);\n\n  if (!fromEdge || !toEdge) {\n    throw new Error('MXFlow.applyLinkPosition(): Cannot apply link position for undefined edge');\n  } // let fromEdgeRect = <DOMRect> fromEdge!.el.getBoundingClientRect();\n  // let toEdgeRect = <DOMRect> toEdge!.el.getBoundingClientRect();\n\n\n  let containerRect = api.dom.containerEl.getBoundingClientRect();\n  let offsetY = containerRect.top;\n  let offsetX = containerRect.left;\n  let latchFrom = getEdgeLatchPos(fromEdge, offsetX, offsetY);\n  let latchTo = getEdgeLatchPos(toEdge, offsetX, offsetY);\n  let x1 = latchFrom.x;\n  let y1 = latchFrom.y;\n  let x2 = latchTo.x;\n  let y2 = latchTo.y;\n\n  if (x1 > x2) {\n    [x1, x2] = swapValues(x1, x2);\n    [y1, y2] = swapValues(y1, y2);\n  }\n\n  let bezier = getBezierPath((x1 - transform.x) / transform.scale, (y1 - transform.y) / transform.scale, (x2 - transform.x) / transform.scale, (y2 - transform.y) / transform.scale, (_a = api.opts.bezierWeight) !== null && _a !== void 0 ? _a : 0.675); //Apply our bezier curve to both the inner and outer link elements\n\n  link.band1.setAttribute('d', bezier);\n  link.band2.setAttribute('d', bezier);\n  link.band3.setAttribute('d', bezier);\n};\n\nconst applyAllLinkPositions = api => {\n  api.state.links.forEach(link => applyLinkPosition(api, link));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/flow-util.ts\n");

/***/ }),

/***/ "./src/flow.ts":
/*!*********************!*\
  !*** ./src/flow.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MXFlowController\": () => (/* binding */ MXFlowController)\n/* harmony export */ });\n/* harmony import */ var types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! types/flow.types.v2 */ \"./src/types/flow.types.v2.ts\");\n/* harmony import */ var _flow_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flow-util */ \"./src/flow-util.ts\");\n/* harmony import */ var util_event_emitter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! util/event-emitter */ \"./src/util/event-emitter.ts\");\n/* harmony import */ var _methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./methods */ \"./src/methods.ts\");\n/* harmony import */ var _systems_select__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./systems/select */ \"./src/systems/select.ts\");\n/* harmony import */ var _systems_drag__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./systems/drag */ \"./src/systems/drag.ts\");\n/* harmony import */ var _systems_lasso__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./systems/lasso */ \"./src/systems/lasso.ts\");\n/* harmony import */ var _systems_panzoom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./systems/panzoom */ \"./src/systems/panzoom.ts\");\n/* harmony import */ var _systems_linker__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./systems/linker */ \"./src/systems/linker.ts\");\n/* harmony import */ var _systems_context__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./systems/context */ \"./src/systems/context.ts\");\n/* harmony import */ var _systems_shortcut__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./systems/shortcut */ \"./src/systems/shortcut.ts\");\n/* harmony import */ var _interact__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./interact */ \"./src/interact.ts\");\n\n\n\n\n\n\n\n\n\n\n\n //Creates internal state structure, passed to the various systems\n\nconst getMXFlowState = dom => {\n  return {\n    root: {\n      key: 'graph',\n      type: types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowItemType.Graph,\n      el: dom.rootEl\n    },\n    nodes: new Map(),\n    edges: new Map(),\n    links: new Map(),\n    preselected: new Map(),\n    selected: new Map(),\n    contextOpen: false,\n    undo: [],\n    redo: [],\n    transform: {\n      x: 0,\n      y: 0,\n      scale: 1\n    }\n  };\n}; //Default options, must include ALL possible options as it is deep-merged w/ user options on init\n\n\nconst DefaultOpts = {\n  nodeHTMLTemplate: _flow_util__WEBPACK_IMPORTED_MODULE_1__.DefaultNodeTemplate,\n  width: 5000,\n  height: 5000,\n  zIndexStart: 100,\n  showGrid: true,\n  gridSize: 32,\n  bezierWeight: 0.675,\n  linkValidator: () => true,\n  beforeLinkStart: () => true,\n  beforeLinkEnd: () => true,\n  beforeNodeRemoved: () => true,\n  beforeEdgeRemoved: () => true,\n  beforeLinkRemoved: () => true,\n  renderContext: () => {},\n  render: () => {},\n  background: {\n    type: 'dots',\n    size: 32,\n    radius: 0.4,\n    html: ''\n  },\n  drag: {\n    cancelSelector: '',\n    handleSelector: '',\n    gridX: 0,\n    gridY: 0,\n    latchThreshold: 5\n  },\n  select: {\n    multiSelectEnabled: true\n  },\n  undo: {\n    enabled: true,\n    max: Infinity,\n    actions: ['drag', 'addEdge', 'removeEdge', 'addLink', 'removeLink', 'addNode', 'removeNode', 'removeItems', 'clear', 'select']\n  },\n  lasso: {\n    enabled: true\n  },\n  panzoom: {\n    enabled: true,\n    minScale: 0.5,\n    maxScale: 2,\n    scaleStep: .25,\n    scale: 1,\n    x: 0,\n    y: 0\n  },\n  controls: {\n    panButton: 0,\n    panModifier: false,\n    panOnWheel: false,\n    panOnArrowKeys: true,\n    zoomOnWheelModifier: false,\n    zoomOnWheel: true,\n    zoomOnPinch: true,\n    zoomOnDoubleClick: false,\n    selectButton: 0,\n    multiSelectModifier: 'Shift',\n    lassoModifier: 'Control',\n    lassoButton: 0\n  }\n};\n/**\r\n * Flattens and merges the user options with the default options, ensuring that all options are present.\r\n *\r\n * @param opts\r\n * @returns\r\n */\n\nconst mergeDefaultOpts = opts => {\n  var _a;\n\n  let merged = {};\n  let defaultFlat = (0,_flow_util__WEBPACK_IMPORTED_MODULE_1__.flatten)(DefaultOpts);\n\n  for (let key in defaultFlat) {\n    (0,_flow_util__WEBPACK_IMPORTED_MODULE_1__.assignProperty)(key, merged, (_a = (0,_flow_util__WEBPACK_IMPORTED_MODULE_1__.resolveProperty)(key, opts)) !== null && _a !== void 0 ? _a : (0,_flow_util__WEBPACK_IMPORTED_MODULE_1__.resolveProperty)(key, DefaultOpts));\n  }\n\n  return merged;\n};\n\nfunction MXFlowController(targetEl, options) {\n  var _a, _b;\n\n  let opts = mergeDefaultOpts(options); //merge({}, DefaultOpts, options);\n\n  const dom = (0,_flow_util__WEBPACK_IMPORTED_MODULE_1__.generateFlowEl)(targetEl, opts);\n  const state = getMXFlowState(dom);\n  const events = new util_event_emitter__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();\n  ``;\n  const tools = new Map();\n  const renderCache = new Map(); //Internal event emitter. Passed to tool instances.\n\n  const emit = (type, event) => {\n    events.emit(type, event);\n  }; //Methods to lock or unlock a specific tool. These are passed to tool instances only.\n\n\n  let toolLock = false;\n\n  const isLocked = exceptTool => toolLock !== false && toolLock.name !== exceptTool;\n\n  const unlock = () => toolLock = false;\n\n  const lock = toolName => {\n    if (!toolLock && tools.has(toolName)) {\n      toolLock = tools.get(toolName);\n    }\n  }; //API and methods, passed to tool instances.\n\n\n  const api = {\n    tools,\n    opts,\n    dom,\n    state,\n    emit,\n    lock,\n    unlock,\n    isLocked,\n    renderCache\n  };\n  const methods = (0,_methods__WEBPACK_IMPORTED_MODULE_3__.getPublicInterface)(api);\n  const interactions = (0,_interact__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(api, methods);\n  /**\r\n   * Creates new option set and notifies all subsystems to update state\\\r\n   *\r\n   * TODO: There are many options which are difficult to change at runtime, will need to consider\r\n   * whether this method is feasible. For now, individual setters are provided for some options.\r\n   *\r\n   * @param options\r\n   */\n  // const setOptions = (options: FlowTypes.Options) => {\n  //     opts = mergeDefaultOpts(options); //merge({}, DefaultOpts, options);\n  //     api.opts = opts;\n  //     tools.forEach(tool => tool.update?.(api));\n  // }\n\n  const setDragOptions = grid => {\n    opts.drag = Object.assign(Object.assign({}, opts.drag), grid);\n    api.opts = opts;\n    tools.forEach(tool => {\n      var _a;\n\n      return (_a = tool.update) === null || _a === void 0 ? void 0 : _a.call(tool, api);\n    });\n  };\n  /**\r\n   * Notifies all subsystems to cancel active operation (linking, dragging, etc.)\r\n   */\n\n\n  const cancel = () => {\n    tools.forEach(tool => {\n      var _a;\n\n      return (_a = tool.cancel) === null || _a === void 0 ? void 0 : _a.call(tool);\n    });\n  }; //Add tools\n\n\n  tools.set('select', (0,_systems_select__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(api, methods, interactions));\n  if ((_a = api.opts.lasso) === null || _a === void 0 ? void 0 : _a.enabled) tools.set('lasso', (0,_systems_lasso__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(api, methods, interactions));\n  if ((_b = api.opts.panzoom) === null || _b === void 0 ? void 0 : _b.enabled) tools.set('panzoom', (0,_systems_panzoom__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(api, methods, interactions));\n  tools.set('drag', (0,_systems_drag__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(api, methods, interactions));\n  tools.set('linker', (0,_systems_linker__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(api, methods, interactions));\n  tools.set('context', (0,_systems_context__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(api, methods, interactions));\n  tools.set('shortcut', (0,_systems_shortcut__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(api, methods));\n\n  const dispose = () => {\n    tools.forEach(tool => {\n      var _a;\n\n      return (_a = tool.dispose) === null || _a === void 0 ? void 0 : _a.call(tool);\n    });\n    interactions.dispose();\n    renderCache.clear();\n  }; //Return public facing api\n\n\n  return Object.assign({\n    on(type, listener) {\n      events.on(type, listener);\n    },\n\n    removeListener(type, listener) {\n      events.removeListener(type, listener);\n    },\n\n    dispose,\n    setDragOptions,\n    cancel\n  }, methods);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/flow.ts\n");

/***/ }),

/***/ "./src/helpers/background.ts":
/*!***********************************!*\
  !*** ./src/helpers/background.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/flow.types.v2 */ \"./src/types/flow.types.v2.ts\");\n\n/**\r\n * Generates HTML for an SVG grid or dot-pattern background. Can be passes to `setBackground()` on mxflow instance.\r\n * Especially useful when creating multiple backgrounds for different scales.\r\n *\r\n * @param type - The background type. Currently supported values are 'grid' or 'dots'\r\n * @param size - The size of the background\r\n * @param radius - If `type=dots`, the radius of each individual dot\r\n * @returns\r\n */\n\nconst generateBackground = (type, size, radius) => {\n  let bg = '';\n\n  if (type === 'grid') {\n    let _size = size ? size : 32;\n\n    let _macroSize = _size * 10;\n\n    bg =\n    /* SVG */\n    `\n            <defs>\n                <pattern id=\"smallGrid\" width=\"${_size}\" height=\"${_size}\" patternUnits=\"userSpaceOnUse\">\n                    <path class=\"${_types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.GridInner}\" d=\"M ${_size} 0 L 0 0 0 ${_size}\" fill=\"none\" stroke=\"#273558\" stroke-width=\"0.5\"/>\n                </pattern>\n                <pattern id=\"grid\" width=\"${_macroSize}\" height=\"${_macroSize}\" patternUnits=\"userSpaceOnUse\">\n                    <rect width=\"${_macroSize}\" height=\"${_macroSize}\" fill=\"url(#smallGrid)\" />\n                    <path class=\"${_types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.GridOuter}\" d=\"M ${_macroSize} 0 L 0 0 0 ${_macroSize}\" fill=\"none\" stroke=\"#273558\" stroke-width=\"1\"/>\n                </pattern>\n            </defs>\n            <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\n        `;\n  } else {\n    let _size = size ? size : 15;\n\n    let _radius = radius ? radius : 0.4;\n\n    bg =\n    /* SVG */\n    `\n            <pattern id=\"mxflow-dot-pattern\" x=\"0\" y=\"0\" width=\"${_size}\" height=\"${_size}\" patternUnits=\"userSpaceOnUse\">\n                <circle cx=\"${_radius}\" cy=\"${_radius}\" r=\"${_radius}\" fill=\"#81818a\"></circle>\n            </pattern>\n            <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"url(#mxflow-dot-pattern)\"></rect>\n        `;\n  }\n\n  let className = type === 'grid' ? _types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Grid : _types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Dots;\n  return (\n    /* SVG */\n    `\n        <svg class=\"${className}\" width=\"100%\" height=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" \n            style=\"position:absolute; top:0; left:0; pointer-events:none; opacity:.5; display:block;'\">\n            ${bg}\n        </svg>\n    `\n  );\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (generateBackground);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaGVscGVycy9iYWNrZ3JvdW5kLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFFQTs7Ozs7Ozs7QUFRRzs7QUFDSCxNQUFNLGtCQUFrQixHQUFHLENBQUMsSUFBRCxFQUF3QixJQUF4QixFQUF1QyxNQUF2QyxLQUEwRDtBQUNqRixNQUFJLEVBQUUsR0FBVyxFQUFqQjs7QUFDQSxNQUFJLElBQUksS0FBSyxNQUFiLEVBQW9CO0FBQ2hCLFFBQUksS0FBSyxHQUFHLElBQUksR0FBRyxJQUFILEdBQVUsRUFBMUI7O0FBQ0EsUUFBSSxVQUFVLEdBQUcsS0FBSyxHQUFHLEVBQXpCOztBQUNBLE1BQUU7QUFBRztBQUFVOztpREFFMEIsS0FBSyxhQUFhLEtBQUs7bUNBQ3JDLHFFQUFtQixVQUFVLEtBQUssY0FBYyxLQUFLOzs0Q0FFNUMsVUFBVSxhQUFhLFVBQVU7bUNBQzFDLFVBQVUsYUFBYSxVQUFVO21DQUNqQyxxRUFBbUIsVUFBVSxVQUFVLGNBQWMsVUFBVTs7OztBQUl6RixTQVhEO0FBWUgsR0FmRCxNQWVPO0FBQ0gsUUFBSSxLQUFLLEdBQUcsSUFBSSxHQUFHLElBQUgsR0FBVSxFQUExQjs7QUFDQSxRQUFJLE9BQU8sR0FBRyxNQUFNLEdBQUcsTUFBSCxHQUFZLEdBQWhDOztBQUNBLE1BQUU7QUFBRztBQUFVO2tFQUMyQyxLQUFLLGFBQWEsS0FBSzs4QkFDM0QsT0FBTyxTQUFTLE9BQU8sUUFBUSxPQUFPOzs7QUFHM0QsU0FMRDtBQU1IOztBQUVELE1BQUksU0FBUyxHQUFHLElBQUksS0FBSyxNQUFULEdBQWtCLGdFQUFsQixHQUFtQyxnRUFBbkQ7QUFDQTtBQUFPO0FBQVU7c0JBQ0MsU0FBUzs7Y0FFakIsRUFBRTs7QUFFWDtBQUxEO0FBTUgsQ0FuQ0Q7O0FBcUNBLGlFQUFlLGtCQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXhmbG93Ly4vc3JjL2hlbHBlcnMvYmFja2dyb3VuZC50cz9lYTdhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZsb3dDbGFzcyB9IGZyb20gJy4uL3R5cGVzL2Zsb3cudHlwZXMudjInO1xyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBIVE1MIGZvciBhbiBTVkcgZ3JpZCBvciBkb3QtcGF0dGVybiBiYWNrZ3JvdW5kLiBDYW4gYmUgcGFzc2VzIHRvIGBzZXRCYWNrZ3JvdW5kKClgIG9uIG14ZmxvdyBpbnN0YW5jZS5cclxuICogRXNwZWNpYWxseSB1c2VmdWwgd2hlbiBjcmVhdGluZyBtdWx0aXBsZSBiYWNrZ3JvdW5kcyBmb3IgZGlmZmVyZW50IHNjYWxlcy5cclxuICogXHJcbiAqIEBwYXJhbSB0eXBlIC0gVGhlIGJhY2tncm91bmQgdHlwZS4gQ3VycmVudGx5IHN1cHBvcnRlZCB2YWx1ZXMgYXJlICdncmlkJyBvciAnZG90cydcclxuICogQHBhcmFtIHNpemUgLSBUaGUgc2l6ZSBvZiB0aGUgYmFja2dyb3VuZFxyXG4gKiBAcGFyYW0gcmFkaXVzIC0gSWYgYHR5cGU9ZG90c2AsIHRoZSByYWRpdXMgb2YgZWFjaCBpbmRpdmlkdWFsIGRvdFxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmNvbnN0IGdlbmVyYXRlQmFja2dyb3VuZCA9ICh0eXBlOiAnZ3JpZCcgfCAnZG90cycsIHNpemU/OiBudW1iZXIsIHJhZGl1cz86IG51bWJlcikgPT4ge1xyXG4gICAgbGV0IGJnOiBzdHJpbmcgPSAnJztcclxuICAgIGlmICh0eXBlID09PSAnZ3JpZCcpe1xyXG4gICAgICAgIGxldCBfc2l6ZSA9IHNpemUgPyBzaXplIDogMzI7XHJcbiAgICAgICAgbGV0IF9tYWNyb1NpemUgPSBfc2l6ZSAqIDEwO1xyXG4gICAgICAgIGJnID0gLyogU1ZHICovIGBcclxuICAgICAgICAgICAgPGRlZnM+XHJcbiAgICAgICAgICAgICAgICA8cGF0dGVybiBpZD1cInNtYWxsR3JpZFwiIHdpZHRoPVwiJHtfc2l6ZX1cIiBoZWlnaHQ9XCIke19zaXplfVwiIHBhdHRlcm5Vbml0cz1cInVzZXJTcGFjZU9uVXNlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHBhdGggY2xhc3M9XCIke0Zsb3dDbGFzcy5HcmlkSW5uZXJ9XCIgZD1cIk0gJHtfc2l6ZX0gMCBMIDAgMCAwICR7X3NpemV9XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCIjMjczNTU4XCIgc3Ryb2tlLXdpZHRoPVwiMC41XCIvPlxyXG4gICAgICAgICAgICAgICAgPC9wYXR0ZXJuPlxyXG4gICAgICAgICAgICAgICAgPHBhdHRlcm4gaWQ9XCJncmlkXCIgd2lkdGg9XCIke19tYWNyb1NpemV9XCIgaGVpZ2h0PVwiJHtfbWFjcm9TaXplfVwiIHBhdHRlcm5Vbml0cz1cInVzZXJTcGFjZU9uVXNlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCIke19tYWNyb1NpemV9XCIgaGVpZ2h0PVwiJHtfbWFjcm9TaXplfVwiIGZpbGw9XCJ1cmwoI3NtYWxsR3JpZClcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGNsYXNzPVwiJHtGbG93Q2xhc3MuR3JpZE91dGVyfVwiIGQ9XCJNICR7X21hY3JvU2l6ZX0gMCBMIDAgMCAwICR7X21hY3JvU2l6ZX1cIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cIiMyNzM1NThcIiBzdHJva2Utd2lkdGg9XCIxXCIvPlxyXG4gICAgICAgICAgICAgICAgPC9wYXR0ZXJuPlxyXG4gICAgICAgICAgICA8L2RlZnM+XHJcbiAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiBmaWxsPVwidXJsKCNncmlkKVwiIC8+XHJcbiAgICAgICAgYFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgX3NpemUgPSBzaXplID8gc2l6ZSA6IDE1O1xyXG4gICAgICAgIGxldCBfcmFkaXVzID0gcmFkaXVzID8gcmFkaXVzIDogMC40O1xyXG4gICAgICAgIGJnID0gLyogU1ZHICovIGBcclxuICAgICAgICAgICAgPHBhdHRlcm4gaWQ9XCJteGZsb3ctZG90LXBhdHRlcm5cIiB4PVwiMFwiIHk9XCIwXCIgd2lkdGg9XCIke19zaXplfVwiIGhlaWdodD1cIiR7X3NpemV9XCIgcGF0dGVyblVuaXRzPVwidXNlclNwYWNlT25Vc2VcIj5cclxuICAgICAgICAgICAgICAgIDxjaXJjbGUgY3g9XCIke19yYWRpdXN9XCIgY3k9XCIke19yYWRpdXN9XCIgcj1cIiR7X3JhZGl1c31cIiBmaWxsPVwiIzgxODE4YVwiPjwvY2lyY2xlPlxyXG4gICAgICAgICAgICA8L3BhdHRlcm4+XHJcbiAgICAgICAgICAgIDxyZWN0IHg9XCIwXCIgeT1cIjBcIiB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgZmlsbD1cInVybCgjbXhmbG93LWRvdC1wYXR0ZXJuKVwiPjwvcmVjdD5cclxuICAgICAgICBgXHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGNsYXNzTmFtZSA9IHR5cGUgPT09ICdncmlkJyA/IEZsb3dDbGFzcy5HcmlkIDogRmxvd0NsYXNzLkRvdHM7XHJcbiAgICByZXR1cm4gLyogU1ZHICovIGBcclxuICAgICAgICA8c3ZnIGNsYXNzPVwiJHtjbGFzc05hbWV9XCIgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBcclxuICAgICAgICAgICAgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTsgdG9wOjA7IGxlZnQ6MDsgcG9pbnRlci1ldmVudHM6bm9uZTsgb3BhY2l0eTouNTsgZGlzcGxheTpibG9jazsnXCI+XHJcbiAgICAgICAgICAgICR7Ymd9XHJcbiAgICAgICAgPC9zdmc+XHJcbiAgICBgXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlQmFja2dyb3VuZDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/helpers/background.ts\n");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MXFlow\": () => (/* reexport safe */ _flow__WEBPACK_IMPORTED_MODULE_0__.MXFlowController)\n/* harmony export */ });\n/* harmony import */ var _flow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flow */ \"./src/flow.ts\");\n/* harmony import */ var _styles_default_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./styles/default.css */ \"./src/styles/default.css\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXgudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL214Zmxvdy8uL3NyYy9pbmRleC50cz9mZmI0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1YRmxvd0NvbnRyb2xsZXIgYXMgTVhGbG93LCBNWEZsb3dDb250cm9sbGVySW5zdGFuY2UgYXMgTVhGbG93SW5zdGFuY2UgfSBmcm9tIFwiLi9mbG93XCI7XHJcbmltcG9ydCAnLi9zdHlsZXMvZGVmYXVsdC5jc3MnO1xyXG5cclxuZXhwb3J0IHsgTVhGbG93LCBNWEZsb3dJbnN0YW5jZSB9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ }),

/***/ "./src/interact.ts":
/*!*************************!*\
  !*** ./src/interact.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _util_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/event-emitter */ \"./src/util/event-emitter.ts\");\n\n\nconst getModifierMap = api => {\n  const controls = api.opts.controls;\n  const modifiers = new Map();\n  if (typeof controls.multiSelectModifier === 'string') modifiers.set(controls.multiSelectModifier.toLowerCase(), false);\n  if (typeof controls.panModifier === 'string') modifiers.set(controls.panModifier.toLowerCase(), false);\n  if (typeof controls.zoomOnWheelModifier === 'string') modifiers.set(controls.zoomOnWheelModifier.toLowerCase(), false);\n  if (typeof controls.lassoModifier === 'string') modifiers.set(controls.lassoModifier.toLowerCase(), false);\n  return modifiers;\n};\n\nconst InteractionEmitter = (api, methods) => {\n  const events = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();\n\n  const emit = (type, event) => {\n    events.emit(type, event);\n  };\n  /**\r\n   * Map to keep track of modifiers and their states\r\n   */\n\n\n  const modifiers = getModifierMap(api);\n  /**\r\n   * Double tap state\r\n   */\n\n  const doubleTap = {\n    thresholdMs: 25,\n    lastTarget: null,\n    timeout: null\n  };\n  /**\r\n   * Dragging state\r\n   */\n\n  const drag = {\n    thresholdPx: 3,\n    startEvent: null,\n    latched: false\n  };\n\n  const getDragLatched = e => {\n    let deltaX = e.clientX - drag.startEvent.clientX;\n    let deltaY = e.clientY - drag.startEvent.clientY;\n    return Math.abs(deltaX) > drag.thresholdPx || Math.abs(deltaY) > drag.thresholdPx;\n  };\n  /**\r\n   * Get a drag event\r\n   *\r\n   * @param e - The event from which to calcualte deltas\r\n   * @param source - Pass in an alternate source event. This is used to pass in original PointerEvent\r\n   * for `dragstart` event, but calculate deltas from last move event.\r\n   * @returns\r\n   */\n\n\n  const getDragEvent = (e, source) => {\n    let deltaX = e.clientX - drag.startEvent.clientX;\n    let deltaY = e.clientY - drag.startEvent.clientY;\n    return {\n      start: drag.startEvent,\n      source: source !== null && source !== void 0 ? source : e,\n      deltaX: deltaX,\n      deltaY: deltaY,\n      scaledDeltaX: deltaX / api.state.transform.scale,\n      scaledDeltaY: deltaY / api.state.transform.scale\n    };\n  };\n\n  const handlePointerDown = e => {\n    /**\r\n     * Handle double tap\r\n     */\n    if (!doubleTap.lastTarget) {\n      //Set initial timeout\n      doubleTap.lastTarget = e.target;\n      doubleTap.timeout = window.setTimeout(() => doubleTap.lastTarget = null, doubleTap.thresholdMs);\n    } else if (e.target === doubleTap.lastTarget) {\n      emit('doubletap', {\n        source: e\n      }); //Tap on same target before timeout cleared, emit event\n    } else {\n      window.clearTimeout(doubleTap.timeout); //Wrong target or timeout nullified original target\n    }\n    /**\r\n     * Handle drag start, but not latch\r\n     *\r\n     * TODO: Need a check here for a \"user content\" sort of section where dragging doesn't take place,\r\n     * something like !(<HTMLElement> e.target).hasAttribute(FlowTypes.FlowAttr.NodeContent) except needs to\r\n     * account for child elements.\r\n     *\r\n     * Also, not here, but we may want something similar for the context menu so that users can select text, etc.\r\n     *\r\n     */\n\n\n    if (e.isPrimary) {\n      drag.startEvent = e;\n    }\n\n    emit('down', {\n      source: e\n    });\n  };\n\n  const handlePointerMove = e => {\n    /**\r\n     * Handle drag\r\n     */\n    if (e.isPrimary && drag.startEvent) {\n      if (!drag.latched) {\n        /**\r\n         * Emit dragstart if we have dragged past the \"latch\" threshold\r\n         */\n        if (getDragLatched(e)) {\n          emit('dragstart', getDragEvent(drag.startEvent, drag.startEvent));\n          drag.startEvent = e;\n          drag.latched = true;\n        }\n      } else {\n        /**\r\n         * If we've already latched, emit drag event\r\n         */\n        emit('drag', getDragEvent(e));\n      }\n    }\n\n    emit('move', {\n      source: e\n    });\n  };\n\n  const handlePointerUp = e => {\n    /**\r\n     * End our drag event if applicable\r\n     */\n    if (drag.startEvent && e.isPrimary) {\n      if (drag.latched) {\n        emit('dragend', getDragEvent(e));\n      }\n\n      drag.latched = false;\n      drag.startEvent = null;\n    }\n\n    emit('up', {\n      source: e\n    });\n  };\n\n  const handleDoubleClick = e => {\n    emit('doubletap', {\n      source: e\n    });\n  };\n\n  const updateModifiers = e => {\n    let code = e.key.toLowerCase();\n    let val = modifiers.get(code);\n\n    if (val !== null && val !== undefined) {\n      modifiers.set(code, e.type === 'keydown');\n    }\n  };\n\n  const handleKeyDown = e => {\n    updateModifiers(e);\n    emit('keydown', {\n      source: e\n    });\n  };\n\n  const handleKeyUp = e => {\n    updateModifiers(e);\n    emit('keyup', {\n      source: e\n    });\n  };\n\n  const handleContextMenu = e => {\n    if (methods.eventInGraph(e)) {\n      e.preventDefault();\n      emit('contextmenu', {\n        source: e,\n        item: methods.resolveItem(e)\n      });\n    }\n  };\n\n  const handleWheel = e => {\n    if (methods.eventInGraph(e)) {\n      //e.preventDefault();\n      emit('wheel', {\n        source: e\n      });\n    }\n  };\n\n  document.addEventListener('pointerdown', handlePointerDown);\n  document.addEventListener('pointermove', handlePointerMove);\n  document.addEventListener('pointerup', handlePointerUp);\n  document.addEventListener('keydown', handleKeyDown);\n  document.addEventListener('keyup', handleKeyUp);\n  document.addEventListener('dblclick', handleDoubleClick);\n  document.addEventListener('contextmenu', handleContextMenu);\n  document.addEventListener('wheel', handleWheel);\n  return {\n    on(type, listener) {\n      events.on(type, listener);\n    },\n\n    removeListener(type, listener) {\n      events.removeListener(type, listener);\n    },\n\n    dispose() {\n      document.removeEventListener('pointerdown', handlePointerDown);\n      document.removeEventListener('pointerdown', handlePointerUp);\n      document.removeEventListener('pointerdown', handlePointerMove);\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n      document.removeEventListener('dblclick', handleDoubleClick);\n      document.removeEventListener('contextmenu', handleContextMenu);\n      document.removeEventListener('wheel', handleWheel);\n    },\n\n    /**\r\n     * Returns true if the modifier key denoted by the given modifier control option\r\n     * is active. ()\r\n     *\r\n     * @param modConfigOpt - The config option (`panModifier`, `multiSelectModifier` etc.);\r\n     */\n    isModActive(modConfigOpt) {\n      let key = api.opts.controls[modConfigOpt];\n\n      if (typeof key === 'string') {\n        return modifiers.get(key.toLowerCase());\n      }\n    },\n\n    isModKeyActive(key) {\n      return modifiers.get(key.toLowerCase());\n    },\n\n    rebaseDrag(e) {\n      drag.startEvent = e;\n    },\n\n    dragging() {\n      return drag.latched;\n    }\n\n  };\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InteractionEmitter);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/interact.ts\n");

/***/ }),

/***/ "./src/methods.ts":
/*!************************!*\
  !*** ./src/methods.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getPublicInterface\": () => (/* binding */ getPublicInterface)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! types/flow.types.v2 */ \"./src/types/flow.types.v2.ts\");\n/* harmony import */ var _flow_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flow-util */ \"./src/flow-util.ts\");\n\n\n\nconst AddNodeDefaultOpts = {\n  x: 0,\n  y: 0,\n  suppressEvent: false,\n  ignoreAction: false,\n  edges: []\n};\n\nconst getPublicInterface = api => {\n  //const opts = api.opts;\n  const dom = api.dom;\n  const state = api.state;\n  const transform = api.state.transform;\n  const emit = api.emit;\n\n  const getCompositeScale = () => {\n    if (api.opts.parent) {\n      return api.opts.parent.getCompositeScale() + api.state.transform.scale;\n    }\n\n    return api.state.transform.scale;\n  };\n\n  const getState = () => {\n    return api.state;\n  };\n\n  const recordAction = action => {\n    var _a, _b, _c;\n\n    if (!((_a = api.opts.undo) === null || _a === void 0 ? void 0 : _a.enabled)) return;\n\n    if ((_c = (_b = api.opts.undo) === null || _b === void 0 ? void 0 : _b.actions) === null || _c === void 0 ? void 0 : _c.includes(action)) {\n      state.undo.unshift({\n        type: action,\n        model: getModel()\n      });\n\n      if (state.undo.length > api.opts.undo.max) {\n        state.undo.pop();\n      }\n      /**\r\n       * Clear redo stack any time a new action was recorded\r\n       */\n\n\n      state.redo = [];\n    }\n  };\n\n  const undo = () => {\n    var _a;\n\n    if (!((_a = api.opts.undo) === null || _a === void 0 ? void 0 : _a.enabled)) return;\n\n    if (state.undo.length > 1) {\n      if (state.undo.length > 0) {\n        state.redo.unshift(state.undo.shift());\n      }\n\n      setModel(_flow_util__WEBPACK_IMPORTED_MODULE_1__.clone(state.undo[0].model));\n    }\n  };\n\n  const redo = () => {\n    var _a;\n\n    if (!((_a = api.opts.undo) === null || _a === void 0 ? void 0 : _a.enabled)) return;\n\n    if (state.redo.length > 0) {\n      if (state.redo.length > 0) {\n        state.undo.unshift(state.redo.shift());\n      }\n\n      setModel(_flow_util__WEBPACK_IMPORTED_MODULE_1__.clone(state.undo[0].model));\n    }\n  };\n\n  const isSelected = item => {\n    let key = typeof item === 'string' ? item : item.key;\n    return state.selected.has(key);\n  };\n\n  const setSelected = (selected, opts) => {\n    let s = Array.isArray(selected) ? new Map(selected.map(item => [item.key, item])) : selected;\n\n    if (state.selected.size !== 0 || s.size !== 0) {\n      _flow_util__WEBPACK_IMPORTED_MODULE_1__.removeItemClass(state.selected, types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.ItemSelected);\n      state.selected = s;\n      _flow_util__WEBPACK_IMPORTED_MODULE_1__.addItemClass(state.selected, types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.ItemSelected); //If we didn't just select everything, enforce layers\n\n      if (s.size !== 0 && state.selected.size < state.nodes.size) {\n        bringToTop(Array.from(selected.values()).filter(item => item.type === 'node'));\n      }\n    }\n\n    if (!(opts === null || opts === void 0 ? void 0 : opts.suppressEvent)) emit('selected', new Map(state.preselected));\n    if (!(opts === null || opts === void 0 ? void 0 : opts.ignoreAction)) recordAction('select');\n  };\n  /**\r\n   * Add one or more items to the current selection.\r\n   */\n\n\n  const addToSelection = (items, opts) => {\n    items.forEach(item => {\n      state.selected.set(item.key, item);\n      _flow_util__WEBPACK_IMPORTED_MODULE_1__.addItemClass(item, types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.ItemSelected);\n    });\n    bringToTop(Array.from(items.values()).filter(item => item.type === 'node'));\n    if (!(opts === null || opts === void 0 ? void 0 : opts.suppressEvent)) emit('selected', new Map(state.selected));\n    if (!(opts === null || opts === void 0 ? void 0 : opts.ignoreAction)) recordAction('select');\n  };\n  /**\r\n   * Remove one or more items from the current selection using item keys.\r\n   */\n\n\n  const removeFromSelection = (keys, opts) => {\n    keys.forEach(key => {\n      let selection = state.selected.get(key);\n\n      if (selection) {\n        _flow_util__WEBPACK_IMPORTED_MODULE_1__.removeItemClass(selection, types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.ItemSelected);\n        state.selected.delete(key);\n      }\n    });\n    if (!(opts === null || opts === void 0 ? void 0 : opts.suppressEvent)) emit('selected', new Map(state.selected));\n    if (!(opts === null || opts === void 0 ? void 0 : opts.ignoreAction)) recordAction('select');\n  };\n  /**\r\n   * Bring one or more nodes to the front.\r\n   *\r\n   * @param nodes - Array of Node items.\r\n   */\n\n\n  const bringToTop = nodes => {\n    let toTop = nodes.sort((a, b) => a.z > b.z ? 1 : -1); //Sort given nodes\n\n    let toTopSet = new Set(toTop);\n    let all = Array.from(state.nodes.values()).sort((a, b) => a.z > b.z ? 1 : -1); //Sort all nodes\n\n    /**\r\n     * Take any node NOT in the given node set and move all thier indexes down.\r\n     * For some nodes, the index may move down by more than 1.\r\n     */\n\n    let lastZ = api.opts.zIndexStart; //Our counter\n\n    all.forEach(node => {\n      if (!toTopSet.has(node)) {\n        node.z = lastZ;\n        node.el.style.zIndex = node.z.toString();\n        lastZ = lastZ + 1;\n      }\n    });\n    /**\r\n     * Relayer our given node set to the top of the list, but maintain the\r\n     * previous z-indexes within the list (this is already done by sorting)\r\n     */\n\n    let toTopBaseZ = lastZ + toTop.length;\n    toTop.forEach((node, i) => {\n      node.z = toTopBaseZ + i;\n      node.el.style.zIndex = node.z.toString();\n    }); //TODO:\n    //api.dom.lassoEl.style.zIndex = (toTop[toTop.length - 1].z + 1).toString();\n  };\n  /**\r\n   * Set which items are \"preselected\". Any existing \"preselect\" states will be removed.\r\n   *\r\n   * @param preselected - Array or map of items to preselect.\r\n   * @param opts\r\n   */\n\n\n  const setPreselected = (preselected, opts) => {\n    let s = Array.isArray(preselected) ? new Map(preselected.map(item => [item.key, item])) : preselected;\n\n    if (state.preselected.size !== 0 || s.size !== 0) {\n      _flow_util__WEBPACK_IMPORTED_MODULE_1__.removeItemClass(state.preselected, types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.ItemPreselected);\n      state.preselected = s;\n      _flow_util__WEBPACK_IMPORTED_MODULE_1__.addItemClass(state.preselected, types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.ItemPreselected);\n    }\n\n    if (!(opts === null || opts === void 0 ? void 0 : opts.suppressEvent)) emit('preselected', new Map(state.preselected));\n  };\n  /**\r\n   * Remove an item from the graph\r\n   *\r\n   * @param type - The item type, one of `node`, `link`, or `edge`\r\n   * @param key - The item key\r\n   * @param opts - Extended options\r\n   * @param opts.suppressEvent - When set to true, no event will be emitted for this action\r\n   * @param opts.ignoreAction - When set to true, no action will be added to the do/undo stack\r\n   * @returns\r\n   */\n\n\n  const removeItem = (type, key, opts) => {\n    let item = getItem(type, key);\n\n    if (item) {\n      switch (item.type) {\n        case 'node':\n          removeNode(item.key, opts);\n          return;\n\n        case 'link':\n          removeLink(item.key, opts);\n          return;\n\n        case 'edge':\n          removeEdge(item.key, opts);\n          return;\n      }\n    }\n  };\n  /**\r\n   * Remove currently selected items from the graph. If there are multiple selected items, and `ignoreAction=false`,\r\n   * then the operations will be batched into a single action.\r\n   *\r\n   * @param opts.suppressEvent - When set to true, no event will be emitted for this action\r\n   * @param opts.ignoreAction - When set to true, no action will be added to the do/undo stack\r\n   */\n\n\n  1;\n\n  const removeSelectedItems = opts => {\n    /**\r\n     * If the selection size is greater than one, we want to ignore the individual remove\r\n     * actions and record the batch action once each operation is complete.\r\n     */\n    let ignoreSingleActions = state.selected.size > 1;\n    state.selected.forEach(item => {\n      removeItem(item.type, item.key, {\n        suppressEvent: opts === null || opts === void 0 ? void 0 : opts.suppressEvent,\n        ignoreAction: (opts === null || opts === void 0 ? void 0 : opts.ignoreAction) || ignoreSingleActions //We will use batch \"removeItems\" if more than one item is being removed\n\n      });\n    }); //Record our batch action only if more than one item was removed\n\n    if (!(opts === null || opts === void 0 ? void 0 : opts.ignoreAction) && ignoreSingleActions) {\n      recordAction('removeItems');\n    }\n  };\n  /**\r\n   * Retrieve an existing item by `type` and `key`.\r\n   *\r\n   * @param type - The item type, one of `graph`, `node`, `edge`, or `link`.\r\n   * @param key - The item key\r\n   * @returns {FlowTypes.FlowItem}\r\n   */\n\n\n  const getItem = (type, key) => {\n    let item;\n\n    if (type === 'graph') {\n      return state.root;\n    } else if (key && type === 'node') {\n      item = state.nodes.get(key);\n    } else if (key && type === 'edge') {\n      item = state.edges.get(key);\n    } else if (key && type === 'link') {\n      item = state.links.get(key);\n    }\n\n    return item;\n  };\n  /**\r\n   * Checks whether the given event target (if there is one) is within this graph.\r\n   *\r\n   * @param e - The event in question\r\n   * @returns\r\n   */\n\n\n  const eventInGraph = e => {\n    var _a, _b, _c;\n\n    return ((_c = (_b = (_a = e.target) === null || _a === void 0 ? void 0 : _a.closest) === null || _b === void 0 ? void 0 : _b.call(_a, `.${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.Container}`)) === null || _c === void 0 ? void 0 : _c.id) === dom.instanceId;\n  };\n  /**\r\n   * Given an event, resolves an item within the graph or returns `undefined` if no item was targeted.\r\n   *\r\n   * @param e - The event in question, either `PointerEvent` or `MouseEvent`\r\n   * @returns {FlowTypes.FlowItem | undefined}\r\n   */\n\n\n  const resolveItem = e => {\n    if (!eventInGraph(e)) return;\n    let item;\n    let target = document.elementFromPoint(e.clientX, e.clientY);\n\n    if (target\n    /*e.target && e.target instanceof Element */\n    ) {\n      let closestItem = target.closest(`[${types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.Type}]`);\n\n      if (closestItem) {\n        closestItem.getAttribute;\n        item = getItem(closestItem.getAttribute(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.Type), closestItem.getAttribute(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowAttr.Key));\n      }\n    }\n\n    return item;\n  };\n\n  const addEdge = (group, nodeKey, edgeKey, opts) => {\n    let key = `${nodeKey}:${edgeKey}`;\n\n    if (!state.edges.has(key)) {\n      let node = state.nodes.get(nodeKey);\n\n      if (node) {\n        let edge = _flow_util__WEBPACK_IMPORTED_MODULE_1__.createEdge(node, group, edgeKey, opts === null || opts === void 0 ? void 0 : opts.class);\n        edge.data = (opts === null || opts === void 0 ? void 0 : opts.data) || {};\n        state.edges.set(key, edge); //if (content) setEdgeContent(nodeKey, edgeKey, content);\n\n        render(edge); //Append edge to node\n\n        edge.group.groupEl.appendChild(edge.el); // let targetList = type === 'input' ? node.inputsEl : node.outputsEl;\n        //     targetList.appendChild(edge.el);\n\n        if (!(opts === null || opts === void 0 ? void 0 : opts.suppressEvent)) emit('edgeAdded', edge);\n        if (!(opts === null || opts === void 0 ? void 0 : opts.ignoreAction)) recordAction('addEdge');\n        return edge;\n      }\n\n      throw new Error(`MXFlow: Attempted to add edge to node which doesn't exist (key=\"${key}\")`);\n    }\n\n    throw new Error(`MXFlow: Attempted to add edge with a key that already exists (key=\"${key}\")`);\n  };\n\n  const removeEdge = (key, opts) => {\n    let edge = state.edges.get(key);\n\n    if (edge) {\n      if (api.opts.beforeEdgeRemoved && !api.opts.beforeEdgeRemoved(edge)) return; //Remove any links associated with this edge and batch this action in w/ the edge removal\n\n      state.links.forEach(link => {\n        if (link.fromNode === (edge === null || edge === void 0 ? void 0 : edge.nodeKey) && link.fromEdge === (edge === null || edge === void 0 ? void 0 : edge.edgeKey) || link.toNode === (edge === null || edge === void 0 ? void 0 : edge.nodeKey) && link.toEdge === (edge === null || edge === void 0 ? void 0 : edge.edgeKey)) {\n          removeLink(link.key, {\n            suppressEvent: opts === null || opts === void 0 ? void 0 : opts.suppressEvent,\n            ignoreAction: true\n          });\n        }\n      });\n      edge.el.remove();\n      state.edges.delete(key);\n      _flow_util__WEBPACK_IMPORTED_MODULE_1__.applyAllLinkPositions(api);\n      if (!(opts === null || opts === void 0 ? void 0 : opts.suppressEvent)) emit('edgeRemoved', edge);\n      if (!(opts === null || opts === void 0 ? void 0 : opts.ignoreAction)) recordAction('removeEdge');\n      return;\n    }\n\n    throw new Error(`MXFlow: No edge exists with key=\"${key}\"`);\n  }; // const setNodeContent = (nodeKey: string, content: HTMLElement | string) => {\n  //     let node = state.nodes.get(nodeKey);\n  //     if (node){\n  //         if (content instanceof HTMLElement){\n  //             node.contentEl.innerHTML = ''\n  //             node.contentEl.appendChild(content);\n  //         } else {\n  //             node.contentEl.innerHTML = ''\n  //             node.contentEl.insertAdjacentHTML('afterbegin', content);\n  //         }\n  //     }\n  //     throw new Error(`MXFlow: Attempted to set node content on node which doesn't exist (key=\"${nodeKey}\")`);\n  // }\n\n\n  const addNode = function (nodeKey) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _a, _b, _c;\n\n    let opts = Object.assign(Object.assign({}, AddNodeDefaultOpts), options);\n\n    if (!state.nodes.has(nodeKey)) {\n      let node = _flow_util__WEBPACK_IMPORTED_MODULE_1__.createNode({\n        template: api.opts.nodeHTMLTemplate,\n        key: nodeKey,\n        x: (_a = opts.x) !== null && _a !== void 0 ? _a : 0,\n        y: (_b = opts.y) !== null && _b !== void 0 ? _b : 0,\n        z: state.nodes.size + 1,\n        width: opts.width,\n        height: opts.height,\n        nodeClass: opts.class,\n        data: opts.data\n      });\n      state.nodes.set(nodeKey, node); //Create edges\n\n      (_c = options.edges) === null || _c === void 0 ? void 0 : _c.forEach(config => {\n        addEdge(config.group, nodeKey, config.key, {\n          data: config.data,\n          class: config.class,\n          suppressEvent: true,\n          ignoreAction: true\n        });\n      });\n      render(node); //Add node and bind position\n\n      dom.nodeContainerEl.appendChild(node.el);\n      _flow_util__WEBPACK_IMPORTED_MODULE_1__.applyNodePosition(node); //Emit event and record action of configured\n\n      if (!(opts === null || opts === void 0 ? void 0 : opts.suppressEvent)) emit('nodeAdded', node);\n      if (!(opts === null || opts === void 0 ? void 0 : opts.ignoreAction)) recordAction('addNode');\n      return;\n    }\n\n    throw new Error(`MXFlow: Attempted to add a node with a key that already exists (key=\"${nodeKey}\")`);\n  }; // const updateNodeTemplate = (node: string | FlowTypes.Node, htmlTemplate: string) => {\n  //     if (typeof node === 'string'){\n  //         node = <FlowTypes.Node> getItem('node', node);\n  //         if (!node){\n  //             throw new Error(`updateNodeTemplate(): No node exists with key=\"${node}\"`);\n  //         }\n  //     }\n  //     FlowUtil.updateNodeTemplate(api, node, htmlTemplate);\n  //     render(node); //Render node\n  //     state.edges.forEach(edge => { //Render any node edges\n  //         if (edge.nodeKey === (<FlowTypes.Node> node).key){\n  //             render(edge);\n  //         }\n  //     })\n  // }\n\n\n  const removeNode = (key, opts) => {\n    let node = state.nodes.get(key);\n\n    if (node) {\n      if (api.opts.beforeNodeRemoved && !api.opts.beforeNodeRemoved(node)) return; //Clear from selection\n\n      if (state.selected.has(key)) {\n        removeFromSelection([key], {\n          suppressEvent: true,\n          ignoreAction: true\n        });\n      } //clear links\n\n\n      state.links.forEach(link => {\n        if (link.fromNode === (node === null || node === void 0 ? void 0 : node.key) || link.toNode === (node === null || node === void 0 ? void 0 : node.key)) {\n          link.el.remove();\n          state.links.delete(link.key);\n        }\n      }); //clear edges\n\n      state.edges.forEach(edge => {\n        if (edge.nodeKey === (node === null || node === void 0 ? void 0 : node.key)) {\n          edge.el.remove();\n          state.edges.delete(edge.key);\n        }\n      }); //this.emit('beforeNodeRemoved', node);\n\n      node.el.remove();\n      state.nodes.delete(key);\n\n      if (!(opts === null || opts === void 0 ? void 0 : opts.suppressEvent)) {\n        emit('nodeRemoved', node);\n      } //Add action to undo stack if configured            \n\n\n      if (!(opts === null || opts === void 0 ? void 0 : opts.ignoreAction)) {\n        recordAction('removeNode');\n      }\n\n      return;\n    }\n\n    throw new Error(`MXFlow: No node exists with key=\"${key}\"`);\n  };\n\n  const addLink = (fromNode, fromEdge, toNode, toEdge, opts) => {\n    let params = {\n      fromNode,\n      fromEdge,\n      toNode,\n      toEdge\n    };\n    let from = state.edges.get(`${fromNode}:${fromEdge}`);\n    let to = state.edges.get(`${toNode}:${toEdge}`);\n\n    if (!from || !to) {\n      throw new Error(`MXFlow.addLink(): One or both edges missing \"${fromEdge}\", \"${toEdge}\"`);\n    } //Swap direction if provided backwards\n    // if (from.type === 'input'){\n    //     throw new Error(`MXflow.addLink(): The \"from\" edge must be of type 'output'.`);\n    // }\n\n\n    if (!isLinkValid(from, to)) {\n      throw new Error(`MXFlow.addLink(): Invalid link.`);\n    }\n\n    let key = _flow_util__WEBPACK_IMPORTED_MODULE_1__.getLinkCompositeKey(params);\n\n    if (!state.links.has(key)) {\n      let link = _flow_util__WEBPACK_IMPORTED_MODULE_1__.createLink(params, opts === null || opts === void 0 ? void 0 : opts.class);\n      link.data = (opts === null || opts === void 0 ? void 0 : opts.data) || {};\n      state.links.set(key, link);\n      dom.linkContainerEl.appendChild(link.el);\n      _flow_util__WEBPACK_IMPORTED_MODULE_1__.applyLinkPosition(api, link);\n\n      if (!(opts === null || opts === void 0 ? void 0 : opts.suppressEvent)) {\n        emit('linkAdded', link);\n      } //Add action to undo stack if configured            \n\n\n      if (!(opts === null || opts === void 0 ? void 0 : opts.ignoreAction)) {\n        recordAction('addLink');\n      }\n\n      return;\n    }\n\n    throw new Error(`MXFlow: Attempted to add link which already exists (key=\"${key}\")`);\n  };\n\n  const removeLink = (key, opts) => {\n    //let key = FlowUtil.getLinkCompositeKey({ fromNode, fromEdge, toNode, toEdge });\n    let link = state.links.get(key);\n\n    if (link) {\n      if (api.opts.beforeLinkRemoved && !api.opts.beforeLinkRemoved(link)) return;\n\n      if (state.selected.has(key)) {\n        removeFromSelection([key], {\n          suppressEvent: true,\n          ignoreAction: true\n        });\n      }\n\n      link.el.remove();\n      state.links.delete(key);\n\n      if (!(opts === null || opts === void 0 ? void 0 : opts.suppressEvent)) {\n        emit('linkRemoved', link);\n      } //Add action to undo stack if configured            \n\n\n      if (!(opts === null || opts === void 0 ? void 0 : opts.ignoreAction)) {\n        recordAction('removeLink');\n      }\n\n      return;\n    }\n  };\n\n  const isLinkValid = (fromEdge, toEdge) => {\n    if (fromEdge && toEdge) {\n      if (fromEdge.nodeKey === toEdge.nodeKey) return false; //Check if edges are on same node\n\n      if (fromEdge.group.groupKey === toEdge.group.groupKey) return false; //Check if type matches\n\n      if (state.links.has(`${fromEdge.nodeKey}:${fromEdge.edgeKey}:${toEdge.nodeKey}:${toEdge.edgeKey}`)) return false; //Check if link already exists\n\n      if (state.links.has(`${toEdge.nodeKey}:${toEdge.edgeKey}:${fromEdge.nodeKey}:${fromEdge.edgeKey}`)) return false;\n      if (api.opts.linkValidator && !api.opts.linkValidator(fromEdge, toEdge)) return false; //User validation\n\n      return true;\n    }\n\n    return false;\n  };\n\n  const openContextMenu = (graphX, graphY, target, opts) => {\n    renderContext(target, graphX, graphY); // dom.contextEl.style.left = `${graphX}px`;\n    // dom.contextEl.style.top = `${graphY}px`;\n    // dom.contextEl.style.display = 'block';\n\n    state.contextOpen = true;\n\n    if (!(opts === null || opts === void 0 ? void 0 : opts.suppressEvent)) {\n      emit('contextOpened', target);\n    }\n  };\n\n  const closeContextMenu = opts => {\n    dom.contextEl.style.display = 'none';\n    state.contextOpen = false;\n\n    if (!(opts === null || opts === void 0 ? void 0 : opts.suppressEvent)) {\n      emit('contextClosed');\n    }\n  };\n\n  const clear = opts => {\n    state.preselected.clear();\n    state.selected.clear();\n    state.nodes.clear();\n    state.edges.clear();\n    state.links.clear();\n    dom.linkContainerEl.innerHTML = '';\n    dom.nodeContainerEl.innerHTML = '';\n    if (!(opts === null || opts === void 0 ? void 0 : opts.suppressEvent)) emit('cleared');\n    if (!(opts === null || opts === void 0 ? void 0 : opts.ignoreAction)) recordAction('clear');\n  };\n  /**\r\n   * Retrieves the current model which can be used to reset to a previous state\r\n   * using setModel()\r\n   */\n\n\n  const getModel = () => {\n    let model = {\n      transform: state.transform,\n      nodes: {},\n      links: {},\n      edges: {}\n    };\n    state.nodes.forEach(node => {\n      model.nodes[node.key] = {\n        selected: state.selected.has(node.key),\n        x: node.x,\n        y: node.y,\n        width: node.width,\n        height: node.height,\n        class: node.class,\n        data: node.data\n      };\n    });\n    state.edges.forEach(edge => {\n      model.edges[edge.key] = {\n        nodeKey: edge.nodeKey,\n        edgeKey: edge.edgeKey,\n        groupKey: edge.group.groupKey,\n        data: edge.data,\n        class: edge.class\n      };\n    });\n    state.links.forEach(link => {\n      model.links[link.key] = {\n        selected: state.selected.has(link.key),\n        fromNode: link.fromNode,\n        fromEdge: link.fromEdge,\n        toNode: link.toNode,\n        toEdge: link.toEdge,\n        data: link.data\n      };\n    });\n    return model;\n  };\n  /**\r\n   * Build graph from a previous model. Optionally provide a hook which returns HTML content for\r\n   * any items with a content section. This method is asynchronous because of the way clientBoundingRect()\r\n   * is calculated (not synchronously)\r\n   */\n\n\n  const setModel = model => (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function* () {\n    clear({\n      suppressEvent: true,\n      ignoreAction: true\n    }); //TODO: Set transform???\n\n    Object.entries(model.nodes).forEach(entry => {\n      addNode(entry[0], {\n        x: entry[1].x,\n        y: entry[1].y,\n        width: entry[1].width,\n        height: entry[1].height,\n        class: entry[1].class,\n        suppressEvent: false,\n        ignoreAction: true\n      });\n\n      if (entry[1].selected) {\n        addToSelection([state.nodes.get(entry[0])], {\n          ignoreAction: true\n        });\n      }\n    });\n    Object.entries(model.edges).forEach(entry => {\n      addEdge(entry[1].groupKey, entry[1].nodeKey, entry[1].edgeKey, {\n        ignoreAction: true,\n        data: entry[1].data,\n        class: entry[1].class\n      });\n    });\n    return new Promise(resolve => {\n      requestAnimationFrame(() => {\n        Object.entries(model.links).forEach(entry => {\n          addLink(entry[1].fromNode, entry[1].fromEdge, entry[1].toNode, entry[1].toEdge, {\n            ignoreAction: true\n          });\n\n          if (entry[1].selected) {\n            addToSelection([state.links.get(entry[0])], {\n              ignoreAction: true\n            });\n          }\n        }); //emit('modelChange', model);\n\n        resolve(null);\n      });\n    });\n  });\n  /**\r\n   * Call render on all existing renderable items.\r\n   *\r\n   * @param data - Optional data object w/ any properties to expose to your render function.\r\n   */\n\n\n  const renderAll = function () {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let items = Array.from(state.nodes.values());\n    items.concat(Array.from(state.edges.values()));\n    items.forEach(item => render(item, data));\n  };\n  /**\r\n   * Call render for a particular item.\r\n   *\r\n   * @param item - A renderable item. Current renderable items are items of type 'node' or 'edge'.\r\n   * @param data - Optional data object w/ any properties to expose to your render function.\r\n   * @returns\r\n   */\n\n\n  const render = function (item) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (api.opts.render) {\n      let cachedContent = api.renderCache.get(item.key); //Get any cached content for the item w/ the given key\n\n      let renderTarget = null,\n          nextContent = api.opts.render(item, cachedContent, data);\n\n      if (item.type === types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowItemType.Node) {\n        renderTarget = item.contentEl;\n        /*\r\n         * Target is an edge, input or output\r\n         */\n      } else if (item.type === types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowItemType.Edge) {\n        renderTarget = item.el;\n      }\n      /**\r\n       * If new content was returned, empty the target element, insert and cache the new content\r\n       */\n\n\n      if (!renderTarget) return;\n\n      if (nextContent) {\n        renderTarget.innerHTML = '';\n\n        if (typeof nextContent === 'string') {\n          renderTarget.insertAdjacentHTML('afterbegin', nextContent);\n        } else {\n          renderTarget.appendChild(nextContent);\n        }\n        /**\r\n         * Cache the HTML content\r\n         */\n\n\n        api.renderCache.set(item.key, renderTarget.firstElementChild);\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @param item\r\n   */\n\n\n  const renderContext = (item, graphX, graphY) => {\n    var _a, _b;\n\n    let renderTarget = dom.contextEl;\n    let nextContent = (_b = (_a = api.opts).renderContext) === null || _b === void 0 ? void 0 : _b.call(_a, item, graphX, graphY);\n\n    if (nextContent) {\n      renderTarget.innerHTML = '';\n\n      if (typeof nextContent === 'string') {\n        renderTarget.insertAdjacentHTML('afterbegin', nextContent);\n      } else {\n        renderTarget.appendChild(nextContent);\n      }\n    }\n\n    dom.contextEl.style.left = `${graphX}px`;\n    dom.contextEl.style.top = `${graphY}px`;\n    dom.contextEl.style.display = 'block';\n  };\n\n  const applyTransform = function () {\n    let transition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (typeof transition === 'number' || transition === true) {\n      dom.rootEl.style.transition = `transform ${typeof transition === 'number' ? transition : 300}ms`;\n    }\n\n    dom.rootEl.style.transform = `translate(${transform.x}px, ${transform.y}px) scale(${transform.scale})`;\n  };\n  /**\r\n   * Resolves a set of page coordinates to a position within the graph container.\r\n   *\r\n   * @param graphX\r\n   * @param graphY\r\n   * @returns\r\n   */\n\n\n  const pageToContainerPos = (graphX, graphY) => {\n    let x = graphX - dom.containerEl.offsetLeft;\n    let y = graphY - dom.containerEl.offsetTop;\n    return [x, y];\n  };\n  /**\r\n    * Resolves a set of page coordinates to a position within the graph.\r\n    *\r\n    * @param pageX - The page x position\r\n    * @param pageY - The page y position\r\n    */\n\n\n  const pageToGraphPos = (pageX, pageY) => {\n    let x = (Math.abs(transform.x) + (pageX - dom.containerEl.offsetLeft)) / transform.scale;\n    let y = (Math.abs(transform.y) + (pageY - dom.containerEl.offsetTop)) / transform.scale;\n    return [x, y];\n  };\n  /**\r\n   * Translate or zoom to any coordinates within the graph.\r\n   *\r\n   * @param {Object} opts - Options object\r\n   * @param {number} opts.x - New x coordinate\r\n   * @param {number} opts.y - New y coordinate\r\n   * @param {number} opts.scale - Provide a new scale between the configured min/max. Must be a positive number. Overrides the `scaleSteps` option.\r\n   * @param {number} opts.scaleStep - Alternative zoom method. Provide the number of steps (positive or negative) to zoom. The\r\n   * size of the step is determined by the `panzoom.scaleStep` configuration property.\r\n   * @param {number | boolean} opts.transition - Pass `false` to use no smooth transition, `true` to use the default transition `300ms`, or a custom\r\n   * transition time in milliseconds.\r\n   * @returns\r\n   */\n\n\n  const setView = opts => {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (api.isLocked()) return; //Ignore setView if our control is locked\n\n    let rootRect = dom.rootEl.getBoundingClientRect();\n    let scale = transform.scale;\n    let minScale = ((_a = api.opts.panzoom) === null || _a === void 0 ? void 0 : _a.minScale) || .05;\n    let maxScale = ((_b = api.opts.panzoom) === null || _b === void 0 ? void 0 : _b.maxScale) || 2;\n    let stepIncrement = ((_c = api.opts.panzoom) === null || _c === void 0 ? void 0 : _c.scaleStep) || .25;\n    let scalePageX = (_d = opts.x) !== null && _d !== void 0 ? _d : transform.x; //Get param coordinates or use current transform values\n\n    let scalePageY = (_e = opts.y) !== null && _e !== void 0 ? _e : transform.y;\n    /**\r\n     * Get our next scale either by the given explicit scale or by scale step.\r\n     * If both are provided, the explicit scale is used.\r\n     */\n\n    let nextScale = transform.scale;\n\n    if (opts.scale) {\n      nextScale = opts.scale;\n    } else if (opts.scaleSteps) {\n      nextScale = parseFloat((scale + opts.scaleSteps * stepIncrement).toFixed(2));\n    } //if (nextScale < minScale || nextScale > maxScale) return;\n\n\n    if (nextScale < minScale || nextScale > maxScale) nextScale = transform.scale;\n    /**\r\n     * Get x and y accounting for new scale\r\n     */\n\n    let nextX = -scalePageX * nextScale; //Apply new scale to coordinates\n\n    let nextY = -scalePageY * nextScale;\n    /**\r\n     * Use our next scale to calculate what the max x (left) and y (top) position will be.\r\n     */\n\n    let containerRect = dom.containerEl.getBoundingClientRect();\n    let maxX = rootRect.width - containerRect.width;\n    let maxY = rootRect.height - containerRect.height;\n    /**\r\n     * Enforce max x/y positions.\r\n     */\n\n    if (nextX > 0) nextX = 0;\n    if (nextY > 0) nextY = 0;\n    if (nextX < -maxX) nextX = -maxX;\n    if (nextY < -maxY) nextY = -maxY;\n    /**\r\n     * Update our values and apply\r\n     */\n\n    api.state.transform.scale = nextScale;\n    api.state.transform.x = nextX;\n    api.state.transform.y = nextY;\n    applyTransform((_f = opts.transition) !== null && _f !== void 0 ? _f : true);\n    if (!opts.suppressEvent) emit('transform', Object.assign({}, transform)); // if (!opts.ignoreAction) recordAction('zoom');\n    //TODO: transform action here?\n  };\n  /**\r\n   * Moves the viewport x/y to focus on a particular node.\r\n   *\r\n   * @param node - The Node item to focus\r\n   * @param scale - Optionally set the new scale\r\n   */\n\n\n  const focusNode = (node, scale) => {\n    let containerRect = dom.containerEl.getBoundingClientRect();\n    let nodeRect = node.el.getBoundingClientRect();\n    let x1 = node.x;\n    let y1 = node.y;\n    let w1 = nodeRect.width / transform.scale;\n    let h1 = nodeRect.height / transform.scale;\n    let w2 = containerRect.width / transform.scale;\n    let h2 = containerRect.height / transform.scale;\n    let x2 = x1 + (w1 - w2) / 2;\n    let y2 = y1 + (h1 - h2) / 2;\n    setView({\n      x: x2,\n      y: y2,\n      scale: scale !== null && scale !== void 0 ? scale : transform.scale\n    });\n  };\n\n  const getDom = () => api.dom;\n\n  const getNodes = () => new Map(state.nodes);\n\n  const getEdges = () => new Map(state.edges);\n\n  const getLinks = () => new Map(state.links);\n  /**\r\n   * Set the background. Use the background helper to generate an SVG `grid` or `dots` background.\r\n   *\r\n   * @param html - The html for the background\r\n   */\n\n\n  const setBackground = html => {\n    dom.bgEl.innerHTML = html;\n  };\n\n  return {\n    recordAction,\n    undo,\n    redo,\n    addEdge,\n    removeEdge,\n    addNode,\n    removeNode,\n    //updateNodeTemplate,\n    addLink,\n    removeLink,\n    isLinkValid,\n    isSelected,\n    setSelected,\n    setPreselected,\n    addToSelection,\n    removeFromSelection,\n    removeItem,\n    removeSelectedItems,\n    openContextMenu,\n    closeContextMenu,\n    getItem,\n    resolveItem,\n    clear,\n    getModel,\n    setModel,\n    getDom,\n    getState,\n    getNodes,\n    getEdges,\n    getLinks,\n    eventInGraph,\n    pageToContainerPos,\n    pageToGraphPos,\n    setView,\n    focusNode,\n    render,\n    renderAll,\n    getCompositeScale,\n    setBackground\n  };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/methods.ts\n");

/***/ }),

/***/ "./src/systems/context.ts":
/*!********************************!*\
  !*** ./src/systems/context.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\r\n * Drag node tool\r\n */\nfunction MXFlowContextTool(api, methods, interactions) {\n  const handleDown = e => {\n    if (e.source.target && e.source.target instanceof HTMLElement) {\n      if (e.source.target === api.dom.contextEl || api.dom.contextEl.contains(e.source.target)) return;\n      methods.closeContextMenu();\n    }\n  };\n\n  const handleWheel = () => methods.closeContextMenu();\n\n  const handleContext = e => {\n    if (e.item) {\n      let [x, y] = methods.pageToContainerPos(e.source.pageX, e.source.pageY);\n      methods.openContextMenu(x, y, e.item);\n    }\n  };\n\n  interactions.on('contextmenu', handleContext);\n  interactions.on('down', handleDown);\n  interactions.on('wheel', handleWheel);\n\n  const dispose = () => {\n    interactions.removeListener('contextmenu', handleContext);\n    interactions.removeListener('down', handleDown);\n    interactions.removeListener('wheel', handleWheel);\n  };\n\n  return {\n    name: 'context',\n    dispose\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MXFlowContextTool);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzdGVtcy9jb250ZXh0LnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFJQTs7QUFFRztBQUNILFNBQVMsaUJBQVQsQ0FBMkIsR0FBM0IsRUFBK0MsT0FBL0MsRUFBK0YsWUFBL0YsRUFBNkk7QUFFekksUUFBTSxVQUFVLEdBQUksQ0FBRCxJQUFvQztBQUNuRCxRQUFJLENBQUMsQ0FBQyxNQUFGLENBQVMsTUFBVCxJQUFtQixDQUFDLENBQUMsTUFBRixDQUFTLE1BQVQsWUFBMkIsV0FBbEQsRUFBOEQ7QUFDMUQsVUFBSSxDQUFDLENBQUMsTUFBRixDQUFTLE1BQVQsS0FBb0IsR0FBRyxDQUFDLEdBQUosQ0FBUSxTQUE1QixJQUF5QyxHQUFHLENBQUMsR0FBSixDQUFRLFNBQVIsQ0FBa0IsUUFBbEIsQ0FBMkIsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxNQUFwQyxDQUE3QyxFQUEwRjtBQUMxRixhQUFPLENBQUMsZ0JBQVI7QUFDSDtBQUNKLEdBTEQ7O0FBT0EsUUFBTSxXQUFXLEdBQUcsTUFBTyxPQUFPLENBQUMsZ0JBQVIsRUFBM0I7O0FBQ0EsUUFBTSxhQUFhLEdBQUksQ0FBRCxJQUF3QztBQUMxRCxRQUFJLENBQUMsQ0FBQyxJQUFOLEVBQVc7QUFDUCxVQUFJLENBQUMsQ0FBRCxFQUFHLENBQUgsSUFBUSxPQUFPLENBQUMsa0JBQVIsQ0FBMkIsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxLQUFwQyxFQUEyQyxDQUFDLENBQUMsTUFBRixDQUFTLEtBQXBELENBQVo7QUFDQSxhQUFPLENBQUMsZUFBUixDQUF3QixDQUF4QixFQUEyQixDQUEzQixFQUE4QixDQUFDLENBQUMsSUFBaEM7QUFDSDtBQUNKLEdBTEQ7O0FBT0EsY0FBWSxDQUFDLEVBQWIsQ0FBZ0IsYUFBaEIsRUFBK0IsYUFBL0I7QUFDQSxjQUFZLENBQUMsRUFBYixDQUFnQixNQUFoQixFQUF3QixVQUF4QjtBQUNBLGNBQVksQ0FBQyxFQUFiLENBQWdCLE9BQWhCLEVBQXlCLFdBQXpCOztBQUNBLFFBQU0sT0FBTyxHQUFHLE1BQUs7QUFDakIsZ0JBQVksQ0FBQyxjQUFiLENBQTRCLGFBQTVCLEVBQTJDLGFBQTNDO0FBQ0EsZ0JBQVksQ0FBQyxjQUFiLENBQTRCLE1BQTVCLEVBQW9DLFVBQXBDO0FBQ0EsZ0JBQVksQ0FBQyxjQUFiLENBQTRCLE9BQTVCLEVBQXFDLFdBQXJDO0FBQ0gsR0FKRDs7QUFNQSxTQUFlO0FBQ1gsUUFBSSxFQUFFLFNBREs7QUFFWDtBQUZXLEdBQWY7QUFJSDs7QUFFRCxpRUFBZSxpQkFBZiIsInNvdXJjZXMiOlsid2VicGFjazovL214Zmxvdy8uL3NyYy9zeXN0ZW1zL2NvbnRleHQudHM/M2U3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBJbnRlcmFjdFR5cGVzIGZyb20gJ3R5cGVzL2ludGVyYWN0LnR5cGVzJztcclxuaW1wb3J0ICogYXMgRmxvd1R5cGVzIGZyb20gJ3R5cGVzL2Zsb3cudHlwZXMudjInO1xyXG5pbXBvcnQgeyBnZXRQdWJsaWNJbnRlcmZhY2UgfSBmcm9tICcuLi9tZXRob2RzJztcclxuXHJcbi8qKlxyXG4gKiBEcmFnIG5vZGUgdG9vbFxyXG4gKi9cclxuZnVuY3Rpb24gTVhGbG93Q29udGV4dFRvb2woYXBpOiBGbG93VHlwZXMuQXBpLCBtZXRob2RzOiBSZXR1cm5UeXBlPHR5cGVvZiBnZXRQdWJsaWNJbnRlcmZhY2U+LCBpbnRlcmFjdGlvbnM6IEludGVyYWN0VHlwZXMuSW50ZXJhY3Rpb25FbWl0dGVyKSA6IEZsb3dUeXBlcy5BY3Rpb25IYW5kbGVyIHtcclxuICAgIFxyXG4gICAgY29uc3QgaGFuZGxlRG93biA9IChlOiBJbnRlcmFjdFR5cGVzLk1YUG9pbnRlckV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKGUuc291cmNlLnRhcmdldCAmJiBlLnNvdXJjZS50YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XHJcbiAgICAgICAgICAgIGlmIChlLnNvdXJjZS50YXJnZXQgPT09IGFwaS5kb20uY29udGV4dEVsIHx8IGFwaS5kb20uY29udGV4dEVsLmNvbnRhaW5zKGUuc291cmNlLnRhcmdldCkpIHJldHVybjtcclxuICAgICAgICAgICAgbWV0aG9kcy5jbG9zZUNvbnRleHRNZW51KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVXaGVlbCA9ICgpID0+ICBtZXRob2RzLmNsb3NlQ29udGV4dE1lbnUoKTtcclxuICAgIGNvbnN0IGhhbmRsZUNvbnRleHQgPSAoZTogSW50ZXJhY3RUeXBlcy5NWENvbnRleHRNZW51RXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoZS5pdGVtKXtcclxuICAgICAgICAgICAgbGV0IFt4LHldID0gbWV0aG9kcy5wYWdlVG9Db250YWluZXJQb3MoZS5zb3VyY2UucGFnZVgsIGUuc291cmNlLnBhZ2VZKTtcclxuICAgICAgICAgICAgbWV0aG9kcy5vcGVuQ29udGV4dE1lbnUoeCwgeSwgZS5pdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJhY3Rpb25zLm9uKCdjb250ZXh0bWVudScsIGhhbmRsZUNvbnRleHQpO1xyXG4gICAgaW50ZXJhY3Rpb25zLm9uKCdkb3duJywgaGFuZGxlRG93bik7XHJcbiAgICBpbnRlcmFjdGlvbnMub24oJ3doZWVsJywgaGFuZGxlV2hlZWwpO1xyXG4gICAgY29uc3QgZGlzcG9zZSA9ICgpID0+IHtcclxuICAgICAgICBpbnRlcmFjdGlvbnMucmVtb3ZlTGlzdGVuZXIoJ2NvbnRleHRtZW51JywgaGFuZGxlQ29udGV4dCk7XHJcbiAgICAgICAgaW50ZXJhY3Rpb25zLnJlbW92ZUxpc3RlbmVyKCdkb3duJywgaGFuZGxlRG93bik7XHJcbiAgICAgICAgaW50ZXJhY3Rpb25zLnJlbW92ZUxpc3RlbmVyKCd3aGVlbCcsIGhhbmRsZVdoZWVsKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gPGNvbnN0PiB7XHJcbiAgICAgICAgbmFtZTogJ2NvbnRleHQnLFxyXG4gICAgICAgIGRpc3Bvc2VcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTVhGbG93Q29udGV4dFRvb2w7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/systems/context.ts\n");

/***/ }),

/***/ "./src/systems/drag.ts":
/*!*****************************!*\
  !*** ./src/systems/drag.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! types/flow.types.v2 */ \"./src/types/flow.types.v2.ts\");\n/* harmony import */ var _flow_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../flow-util */ \"./src/flow-util.ts\");\n\n\n/**\r\n * Drag node tool\r\n */\n\nfunction MXFlowDragTool(api, methods, interactions) {\n  let state = api.state;\n  let items = [];\n  let gridX = api.opts.drag.gridX || 0;\n  let gridY = api.opts.drag.gridY || 0;\n  let deltaChanged = false;\n\n  const update = api => {\n    state = api.state;\n    gridX = api.opts.drag.gridX || 0;\n    gridY = api.opts.drag.gridY || 0;\n  };\n\n  const isValid = (e, item) => {\n    return !interactions.isModActive('multiSelectModifier') && state.selected.size !== 0 && item && item.type === 'node' && (e.pointerType !== 'mouse' || e.button === api.opts.controls.selectButton);\n  };\n\n  const applyDrag = function (e) {\n    let finalize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let deltaX = gridX !== 0 ? gridX * Math.floor(e.scaledDeltaX / gridX) : e.scaledDeltaX;\n    let deltaY = gridY !== 0 ? gridY * Math.floor(e.scaledDeltaY / gridY) : e.scaledDeltaY; //Track when delta changes. We don't want to record any action when grid dragging unless an item actually moved\n\n    if (!deltaChanged && (deltaX !== 0 || deltaY !== 0)) {\n      deltaChanged = true;\n    }\n\n    items.forEach(item => {\n      /**\r\n       * Calculate an item's offset from the grid and factor it into the deltas.\r\n       * This prevents each item from being on a \"different grid\" if the grid was\r\n       * activated after some items were already dragged freely without it.\r\n       *\r\n       * TODO: Make this optionally the bounding box offset?\r\n       */\n      let gridOffsetX = gridX !== 0 ? item.x % gridX : 0;\n      let gridOffsetY = gridY !== 0 ? item.y % gridY : 0;\n      /**\r\n       * Set deltas and apply new position\r\n       */\n\n      if (finalize) {\n        let finalX = item.x + (deltaX - gridOffsetX);\n        let finalY = item.y + (deltaY - gridOffsetY);\n        item.x = finalX;\n        item.y = finalY;\n        item.deltaX = 0;\n        item.deltaY = 0;\n      } else {\n        item.deltaX = deltaX - gridOffsetX;\n        item.deltaY = deltaY - gridOffsetY;\n      }\n\n      _flow_util__WEBPACK_IMPORTED_MODULE_1__.applyNodePosition(item);\n    });\n    _flow_util__WEBPACK_IMPORTED_MODULE_1__.applyAllLinkPositions(api);\n  };\n\n  const handleDragStart = e => {\n    let item = methods.resolveItem(e.source);\n\n    if (isValid(e.source, item)) {\n      items = Array.from(state.selected.values()).filter(item => item.type === types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowItemType.Node);\n      interactions.on('drag', handleDrag);\n      interactions.on('dragend', handleDragEnd);\n      deltaChanged = false;\n      applyDrag(e);\n    }\n  };\n\n  const handleDrag = e => {\n    applyDrag(e);\n  };\n\n  const handleDragEnd = e => {\n    applyDrag(e, true);\n    items = [];\n    interactions.removeListener('drag', handleDrag);\n    interactions.removeListener('dragend', handleDragEnd);\n    /**\r\n     * If our deltas actually changed during this drag (may not have if grid is enabled),\r\n     * record our drag action\r\n     */\n\n    if (deltaChanged) {\n      methods.recordAction(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.DRAG);\n    }\n  };\n\n  interactions.on('dragstart', handleDragStart);\n\n  const dispose = () => {\n    interactions.removeListener('dragstart', handleDragStart);\n    interactions.removeListener('drag', handleDrag);\n    interactions.removeListener('dragend', handleDragEnd);\n  };\n\n  return {\n    name: 'drag',\n    update,\n    dispose\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MXFlowDragTool);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/systems/drag.ts\n");

/***/ }),

/***/ "./src/systems/lasso.ts":
/*!******************************!*\
  !*** ./src/systems/lasso.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _flow_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flow-util */ \"./src/flow-util.ts\");\n\n/**\r\n * MXFlow tool which handles lasso selection\r\n */\n\nfunction MXFlowLassoTool(api, methods, interactions) {\n  let state = api.state;\n  let dom = api.dom;\n\n  const update = api => {\n    state = api.state;\n    dom = api.dom;\n  };\n\n  const isValid = (e, item) => {\n    if (!item || item.type !== 'graph') return; //if (interactions.isModActive('multiSelectModifier')) return;\n\n    if (api.opts.controls.lassoModifier) {\n      return e.button === api.opts.controls.lassoButton && interactions.isModActive('lassoModifier');\n    }\n\n    return e.button === api.opts.controls.lassoButton;\n  };\n\n  const handleDragStart = e => {\n    let item = methods.resolveItem(e.source);\n\n    if (isValid(e.source, item)) {\n      dom.lassoEl.style.display = 'block';\n      api.lock('lasso');\n      interactions.on('drag', handleDrag);\n      interactions.on('dragend', handleDragEnd);\n    }\n  };\n\n  const handleDrag = e => {\n    let preselected = new Map();\n    let width = Math.abs(e.deltaX);\n    let height = Math.abs(e.deltaY);\n    let left, top;\n    [left, top] = methods.pageToContainerPos(Math.min(e.start.pageX, e.source.pageX), Math.min(e.start.pageY, e.source.pageY));\n    dom.lassoEl.setAttribute('x', left + 'px');\n    dom.lassoEl.setAttribute('y', top + 'px');\n    dom.lassoEl.setAttribute('width', width + 'px');\n    dom.lassoEl.setAttribute('height', height + 'px'); // dom.lassoEl.style.left = left + 'px';\n    // dom.lassoEl.style.top = top + 'px';\n    // dom.lassoEl.style.width = width + 'px';\n    // dom.lassoEl.style.height = height + 'px';\n\n    let lassoRect = dom.lassoEl.getBoundingClientRect();\n    state.nodes.forEach(node => {\n      let nodeRect = node.el.getBoundingClientRect();\n\n      if (_flow_util__WEBPACK_IMPORTED_MODULE_0__.intersectRect(nodeRect, lassoRect)) {\n        preselected.set(node.key, node);\n      }\n    });\n    methods.setPreselected(preselected);\n  };\n\n  const handleDragEnd = e => {\n    dom.lassoEl.style.display = 'none';\n    dom.lassoEl.setAttribute('width', '0px');\n    dom.lassoEl.setAttribute('height', '0px'); //Emit events\n\n    methods.setSelected(new Map(state.preselected)); //Clear preselection and unlock api\n\n    methods.setPreselected(new Map());\n    api.unlock(); //Remove our active handlers\n\n    interactions.removeListener('drag', handleDrag);\n    interactions.removeListener('dragend', handleDragEnd);\n  };\n\n  interactions.on('dragstart', handleDragStart);\n\n  const dispose = () => {\n    interactions.removeListener('dragstart', handleDragStart);\n    interactions.removeListener('drag', handleDrag);\n    interactions.removeListener('dragend', handleDragEnd);\n  };\n\n  return {\n    name: 'lasso',\n    dispose,\n    update\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MXFlowLassoTool);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/systems/lasso.ts\n");

/***/ }),

/***/ "./src/systems/linker.ts":
/*!*******************************!*\
  !*** ./src/systems/linker.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! types/flow.types.v2 */ \"./src/types/flow.types.v2.ts\");\n/* harmony import */ var _flow_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../flow-util */ \"./src/flow-util.ts\");\n\n\n/**\r\n * MXFlow tool which handles lasso selection\r\n */\n\nfunction MXFlowLinkerTool(api, methods, interactions) {\n  const state = api.state;\n  const dom = api.dom; //let active = false;\n\n  let fromEdge = null;\n  let lastEdge;\n\n  const applyGhostLinkPosition = (e, toEdge) => {\n    let transform = state.transform;\n    let containerRect = dom.containerEl.getBoundingClientRect();\n    let offsetY = containerRect.top;\n    let offsetX = containerRect.left;\n    let latchFrom = _flow_util__WEBPACK_IMPORTED_MODULE_1__.getEdgeLatchPos(fromEdge, offsetX, offsetY);\n    let x1 = latchFrom.x;\n    let y1 = latchFrom.y;\n    let x2, y2;\n\n    if (toEdge) {\n      let latchTo = _flow_util__WEBPACK_IMPORTED_MODULE_1__.getEdgeLatchPos(toEdge, offsetX, offsetY);\n      x2 = latchTo.x;\n      y2 = latchTo.y;\n    } else {\n      //[x2, y2] = methods.pageToGraphPos(e.pageX, e.pageY);\n      // x2 = e.pageX - offsetX;\n      // y2 = e.pageY - offsetY;\n      x2 = e.pageX - api.dom.containerEl.offsetLeft;\n      y2 = e.pageY - api.dom.containerEl.offsetTop;\n    }\n    /**\r\n     * Reverse link direction so that it stays uniform regardless of which end it was dragged from\r\n     */\n\n\n    if (x1 > x2) {\n      [x1, x2] = _flow_util__WEBPACK_IMPORTED_MODULE_1__.swapValues(x1, x2);\n      [y1, y2] = _flow_util__WEBPACK_IMPORTED_MODULE_1__.swapValues(y1, y2);\n    }\n\n    dom.ghostLinkEl.setAttribute('d', _flow_util__WEBPACK_IMPORTED_MODULE_1__.getBezierPath((x1 - transform.x) / transform.scale, (y1 - transform.y) / transform.scale, (x2 - transform.x) / transform.scale, (y2 - transform.y) / transform.scale, api.opts.bezierWeight));\n  };\n\n  const isValidEvent = (e, item) => {\n    return e.isPrimary && item && item.type === 'edge' && (e.pointerType !== 'mouse' || e.button === api.opts.controls.selectButton);\n  };\n\n  const handleDown = e => {\n    let item = methods.resolveItem(e.source);\n\n    if (isValidEvent(e.source, item)) {\n      item = item;\n\n      if (api.opts.beforeLinkStart(item)) {\n        fromEdge = item;\n        dom.ghostLinkEl.style.display = \"block\";\n        api.lock('linker');\n        applyGhostLinkPosition(e.source);\n        interactions.on('move', handleMove);\n        interactions.on('up', handleUp);\n      }\n    }\n  };\n\n  const handleMove = e => {\n    if (e.source.isPrimary) {\n      let item = methods.resolveItem(e.source);\n\n      if (item && item.key !== (fromEdge === null || fromEdge === void 0 ? void 0 : fromEdge.key) && item.type === 'edge') {\n        lastEdge = item;\n        let isValid = methods.isLinkValid(fromEdge, item);\n\n        if (isValid) {\n          dom.ghostLinkEl.classList.remove(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.LinkInvalid);\n          dom.ghostLinkEl.classList.add(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.LinkValid);\n          item.el.classList.remove(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.EdgeInvalid);\n          item.el.classList.add(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.EdgeValid);\n        } else {\n          dom.ghostLinkEl.classList.remove(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.LinkValid);\n          dom.ghostLinkEl.classList.add(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.LinkInvalid);\n          item.el.classList.remove(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.EdgeValid);\n          item.el.classList.add(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.EdgeInvalid);\n        }\n\n        applyGhostLinkPosition(e.source, item);\n        return;\n      } else {\n        dom.ghostLinkEl.classList.remove(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.LinkValid);\n        dom.ghostLinkEl.classList.remove(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.LinkInvalid);\n\n        if (lastEdge) {\n          lastEdge.el.classList.remove(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.EdgeValid);\n          lastEdge.el.classList.remove(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.EdgeInvalid);\n          lastEdge = null;\n        }\n      }\n\n      applyGhostLinkPosition(e.source);\n    }\n  };\n\n  const handleUp = e => {\n    let item = methods.resolveItem(e.source);\n    if (e.source.isPrimary) endLinking();\n    if (!isValidEvent(e.source, item)) return;\n    item = item;\n    if (e.source.button !== api.opts.controls.selectButton) return;\n    if (!api.opts.beforeLinkEnd(fromEdge, item)) return;\n\n    if (methods.isLinkValid(fromEdge, item)) {\n      //Internal validation\n      methods.addLink(fromEdge.nodeKey, fromEdge.edgeKey, item.nodeKey, item.edgeKey);\n    }\n  };\n\n  const endLinking = () => {\n    dom.ghostLinkEl.style.display = \"none\";\n\n    if (lastEdge) {\n      lastEdge.el.classList.remove(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.EdgeValid);\n      lastEdge.el.classList.remove(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.EdgeInvalid);\n      lastEdge = null;\n    }\n\n    interactions.removeListener('move', handleMove);\n    interactions.removeListener('up', handleUp);\n    api.unlock();\n  };\n\n  interactions.on('down', handleDown);\n\n  const dispose = () => {\n    interactions.removeListener('down', handleDown);\n    interactions.removeListener('move', handleMove);\n    interactions.removeListener('up', handleUp);\n  };\n\n  return {\n    name: 'linker',\n    dispose\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MXFlowLinkerTool);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/systems/linker.ts\n");

/***/ }),

/***/ "./src/systems/panzoom.ts":
/*!********************************!*\
  !*** ./src/systems/panzoom.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! types/flow.types.v2 */ \"./src/types/flow.types.v2.ts\");\n/* harmony import */ var _flow_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../flow-util */ \"./src/flow-util.ts\");\n\n\n\nconst distance = (x1, y1, x2, y2) => {\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n};\n\nconst midpoint = (x1, y1, x2, y2) => {\n  return [(x1 + x2) / 2, (y1 + y2) / 2];\n};\n/**\r\n * MXFlow tool which handles lasso selection.\r\n */\n\n\nfunction MXFlowPanZoomTool(api, methods, interactions) {\n  let controls = api.opts.controls;\n  let opts = api.opts.panzoom;\n  let state = api.state;\n  let dom = api.dom;\n  let transform = state.transform;\n  let panning = false;\n  let pinching = false;\n  let width = api.opts.width; //dom. //dom.rootEl.getBoundingClientRect().width;\n\n  let height = api.opts.height; //5000;//dom.rootEl.getBoundingClientRect().height;\n\n  let deltaX = 0;\n  let deltaY = 0;\n  let panStartX = 0;\n  let panStartY = 0;\n  let maxDeltaBottom = 0;\n  let maxDeltaRight = 0; //let lastMoveEvent: PointerEvent | null = null;\n  // let startDiff: number = 0;\n  // let pointer1: PointerEvent | null = null;\n  // let pointer2: PointerEvent | null = null;\n  // let pinchStartDistance = 0;\n  // let canvasRect = dom.rootEl.getBoundingClientRect(); //Probably doesn't need to recalculated\n\n  const update = api => {\n    opts = api.opts.panzoom;\n    state = api.state;\n    dom = api.dom;\n    transform = state.transform;\n  };\n\n  const isValidDragPan = (e, item) => {\n    let modActive = controls.panModifier ? interactions.isModActive('panModifier') : true;\n    return !api.isLocked() && e.isPrimary && (item === null || item === void 0 ? void 0 : item.type) === 'graph'\n    /*&& opts.panFilter!(e) */\n    && modActive && (e.pointerType !== 'mouse' || e.button === controls.panButton);\n  };\n\n  const applyTransform = function () {\n    let transition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    dom.rootEl.style.transition = transition ? 'transform .3s' : '';\n    dom.rootEl.style.transform = `translate(${transform.x + deltaX}px, ${transform.y + deltaY}px) scale(${transform.scale})`;\n  };\n\n  const updateMaxDeltas = () => {\n    /**\r\n     * Calculate max deltas. Note: Can substitute canvas element rect width/height for this\r\n     * calculation `(api.opts.width * transform.scale)`. Not sure which is more performant, or concise.\r\n     */\n    let containerRect = dom.containerEl.getBoundingClientRect();\n    maxDeltaRight = api.opts.width * transform.scale - (Math.abs(transform.x) + containerRect.width);\n    maxDeltaBottom = api.opts.height * transform.scale - (Math.abs(transform.y) + containerRect.height);\n  };\n\n  const handleDragStart = e => {\n    if (isValidDragPan(e.source, methods.resolveItem(e.source))) {\n      updateMaxDeltas();\n      /**\r\n       * Add our drag handlers\r\n       */\n\n      panning = true;\n      interactions.on('drag', handleDrag);\n      interactions.on('dragend', handleDragEnd);\n      /**\r\n       * Add our pan class\r\n       */\n\n      api.dom.rootEl.classList.add(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.RootPanning);\n    }\n  };\n\n  const handleDrag = e => {\n    updateMaxDeltas();\n    deltaX = -(0,_flow_util__WEBPACK_IMPORTED_MODULE_1__.clamp)(-e.deltaX, transform.x, maxDeltaRight);\n    deltaY = -(0,_flow_util__WEBPACK_IMPORTED_MODULE_1__.clamp)(-e.deltaY, transform.y, maxDeltaBottom);\n    applyTransform(false);\n  };\n\n  const handleDragEnd = e => {\n    /**\r\n     * Merge deltas with transform and zero out detlas, clear listeners\r\n     */\n    transform.x = transform.x + deltaX;\n    transform.y = transform.y + deltaY;\n    deltaX = 0;\n    deltaY = 0;\n    interactions.removeListener('drag', handleDrag);\n    interactions.removeListener('dragend', handleDragEnd);\n    panning = false;\n    api.dom.rootEl.classList.remove(types_flow_types_v2__WEBPACK_IMPORTED_MODULE_0__.FlowClass.RootPanning);\n    applyTransform();\n  };\n\n  const stepPan = (stepX, stepY) => {\n    deltaX = 0; // clear any existing delta values\n\n    deltaY = 0;\n    let containerRect = dom.containerEl.getBoundingClientRect();\n    transform.x = -(0,_flow_util__WEBPACK_IMPORTED_MODULE_1__.clamp)(-(transform.x + stepX), 0, width * transform.scale - containerRect.width);\n    transform.y = -(0,_flow_util__WEBPACK_IMPORTED_MODULE_1__.clamp)(-(transform.y + stepY), 0, height * transform.scale - containerRect.height);\n    applyTransform();\n  };\n\n  const handleKeyDown = e => {\n    if (api.opts.controls.panOnArrowKeys && methods.eventInGraph(e.source)) {\n      switch (e.source.key) {\n        case 'ArrowUp':\n          stepPan(0, 75);\n          break;\n\n        case 'ArrowRight':\n          stepPan(-75, 0);\n          break;\n\n        case 'ArrowDown':\n          stepPan(0, -75);\n          break;\n\n        case 'ArrowLeft':\n          stepPan(75, 0);\n          break;\n      }\n    }\n  };\n\n  const handleWheel = e => {\n    if (panning) return;\n    let delta = Math.max(-1, Math.min(1, -e.source.deltaY));\n    /**\r\n     * Handle pan via wheel. This control supercededs zooming via pan.\r\n     */\n\n    if (api.opts.controls.panOnWheel) {\n      if (api.dom.containerEl === document.activeElement || api.dom.containerEl.contains(document.activeElement)) {\n        let step = delta * 75;\n\n        if (interactions.isModKeyActive('Shift')) {\n          stepPan(step, 0);\n        } else {\n          stepPan(0, step);\n        }\n\n        applyTransform();\n      }\n\n      return;\n    }\n    /**\r\n     * Handle zoom via wheel.\r\n     */\n\n\n    if (api.opts.controls.zoomOnWheel) {\n      handleZoom(e.source);\n    }\n  };\n  /**\r\n   * ------------------------------------------------------------------------------------------------\r\n   * Resize Handler\r\n   * ------------------------------------------------------------------------------------------------\r\n   */\n\n  /**\r\n   * Calculates \"inherent\" min scale based on window size and returns whichever is largest between the\r\n   * inherent min and the min scale give in options.\r\n   *\r\n   * @param containerRect\r\n   * @returns\r\n   */\n\n\n  const getMinScale = containerRect => {\n    containerRect = containerRect !== null && containerRect !== void 0 ? containerRect : dom.containerEl.getBoundingClientRect();\n    return Math.max(Math.max(containerRect.width / width, opts.minScale), Math.max(containerRect.height / height, opts.minScale));\n  };\n\n  const handleResize = () => {\n    /**\r\n     * Enforce min/max scale and positioning on resize.\r\n     *\r\n     * NOTE: This behavior doesn't seem quite right (sometimes resetting position overzealously),\r\n     * but it does effectively ensure that we don't end up w/ invalid scale or positioning which is enough for now.\r\n     */\n    let containerRect = dom.containerEl.getBoundingClientRect();\n    let minScale = getMinScale(containerRect);\n    let nextScale = Math.max(transform.scale, minScale);\n    let maxX = width * nextScale - containerRect.width;\n    let maxY = height * nextScale - containerRect.height;\n    let nextX = -Math.min(maxX, Math.abs(transform.x));\n    let nextY = -Math.min(maxY, Math.abs(transform.y));\n    transform.scale = nextScale;\n    transform.x = nextX;\n    transform.y = nextY;\n    applyTransform();\n  };\n\n  const handleResizeThrottled = (0,_flow_util__WEBPACK_IMPORTED_MODULE_1__.throttle)(handleResize, 500);\n  /**\r\n   * ------------------------------------------------------------------------------------------------\r\n   * Event binding\r\n   * ------------------------------------------------------------------------------------------------\r\n   */\n\n  interactions.on('dragstart', handleDragStart);\n  interactions.on('wheel', handleWheel);\n  interactions.on('keydown', handleKeyDown);\n  window.addEventListener('resize', handleResizeThrottled);\n\n  const dispose = () => {\n    interactions.removeListener('dragstart', handleDragStart);\n    interactions.removeListener('drag', handleDrag);\n    interactions.removeListener('dragend', handleDragEnd);\n    interactions.removeListener('wheel', handleWheel);\n    interactions.removeListener('keydown', handleKeyDown);\n    window.removeEventListener('resize', handleResizeThrottled);\n  };\n\n  const handleZoom = e => {\n    //if (!methods.eventInGraph(e) || panning || api.isLocked()) return;\n    //e.preventDefault();\n    //e.stopPropagation();\n    let containerRect = dom.containerEl.getBoundingClientRect();\n    let delta = Math.max(-1, Math.min(1, -e.deltaY));\n    let scalePageX = e.pageX - dom.containerEl.offsetLeft;\n    let scalePageY = e.pageY - dom.containerEl.offsetTop;\n    let translateX = -((scalePageX - transform.x) / transform.scale);\n    let translateY = -((scalePageY - transform.y) / transform.scale);\n    /**\r\n     * Calculate our min and max scale. For min scale we must enforce \"inherent\" minimum to prevent\r\n     * our root element from ever being scaled so small that it does span the entire width of the\r\n     * container.\r\n     */\n\n    let minScale = getMinScale(containerRect);\n    let maxScale = opts === null || opts === void 0 ? void 0 : opts.maxScale;\n    /**\r\n     * Calculate our next scale and return if it violates min/max constraints.\r\n     * Uncomment scale to make the zooming feel more porpotional (at the cost\r\n     * if easily divisible scale).\r\n     */\n\n    let nextScale = parseFloat((transform.scale + delta * (opts === null || opts === void 0 ? void 0 : opts.scaleStep)\n    /* * scale */\n    ).toFixed(2));\n    if (nextScale < minScale || nextScale > maxScale) return;\n    /**\r\n     * Get our potential next x and y positions\r\n     */\n\n    let nextX = translateX * nextScale + scalePageX;\n    let nextY = translateY * nextScale + scalePageY;\n    /**\r\n     * Use our next scale to calculate what the max x (left) and y (top) position will be.\r\n     */\n\n    let maxX = width * nextScale - containerRect.width;\n    let maxY = height * nextScale - containerRect.height;\n    /**\r\n     * Enforce max x/y positions.\r\n     *\r\n     * NOTE: Tried to use clamp() method here but it seemed to introduce\r\n     * tiny offsets when zooming against a boundary. Maybe something to do w/\r\n     * Math.min/math.max.\r\n     *\r\n     */\n\n    if (nextX > 0) nextX = 0;\n    if (nextY > 0) nextY = 0;\n    if (nextX < -maxX) nextX = -maxX;\n    if (nextY < -maxY) nextY = -maxY;\n    /**\r\n     * Update our values and apply\r\n     */\n\n    transform.scale = nextScale;\n    transform.x = nextX;\n    transform.y = nextY;\n    applyTransform(true);\n    api.emit('transform', Object.assign({}, transform));\n    methods.recordAction('transform');\n  };\n  /**\r\n   * Enforce resize\r\n   */\n\n\n  handleResize();\n  return {\n    name: 'panzoom',\n    update,\n    dispose\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MXFlowPanZoomTool);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/systems/panzoom.ts\n");

/***/ }),

/***/ "./src/systems/select.ts":
/*!*******************************!*\
  !*** ./src/systems/select.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\r\n * MXFlow tool which handles basic selections w/ down and down + shift;\r\n */\nfunction MXFlowSelectTool(api, methods, interactions) {\n  let state = api.state;\n  let dragged = false;\n\n  const update = api => state = api.state;\n\n  const handleDragStart = () => dragged = true;\n\n  const handleDown = evt => {\n    let e = evt.source,\n        item = methods.resolveItem(evt.source);\n    if (!item || !methods.eventInGraph(e)) return; //Clear selection when down event is on graph\n\n    let multi = interactions.isModActive('multiSelectModifier');\n\n    if (item.type === 'graph') {\n      if (multi) return;\n      if (interactions.isModActive('lassoModifier') && e.button === api.opts.controls.lassoButton) return;\n\n      if (e.button === api.opts.controls.selectButton\n      /* && api.dom.containerEl.contains(<HTMLElement> e.target) */\n      ) {\n        methods.setSelected([]);\n      }\n    }\n\n    if (item.type !== 'link' && item.type !== 'node') return;\n\n    if (e.button === api.opts.controls.selectButton) {\n      let noselect = false; //TODO - Check whether target has no-select attribute\n\n      switch (true) {\n        /**\r\n         * Down on a single item, without shift, when there are either no items currently\r\n         * selected, or there is only one and it is the target of the event. Begins drag on a\r\n         * single item.\r\n         */\n        case !multi && !methods.isSelected(item):\n          //case !multi && methods.isSelected(item) && state.selected.size === 1: //Removed because leftover from old drag code?\n          methods.setSelected([item]);\n          break;\n\n        /**\r\n         * With shift held down, mouse down on an item that is not yet selected.\r\n         * Adds the target item to the selections.\r\n         */\n\n        case multi && !methods.isSelected(item):\n          methods.addToSelection([item]);\n          break;\n\n        /**\r\n         * With shift held down, mouse down on an item that is already selected.\r\n         * Deselects the target item.\r\n         */\n\n        case multi && methods.isSelected(item):\n          methods.removeFromSelection([item.key]);\n          break;\n      }\n    }\n  };\n  /**\r\n   * Returns true if all conditions are met under which an up event should be handled\r\n   */\n\n\n  const shouldHandleUpEvt = (e, item) => {\n    return !dragged && !interactions.isModActive('multiSelectModifier') && methods.eventInGraph(e.source) && item && (item.type === 'link' || item.type === 'node') && state.selected.size > 1;\n  };\n  /**\r\n   * Handles the specific case of an `up` event on a node when multiple nodes are selected\r\n   * and no drag event occurred. Deselects all other nodes.\r\n   */\n\n\n  const handleUp = evt => {\n    let item = methods.resolveItem(evt.source);\n\n    if (shouldHandleUpEvt(evt, item)) {\n      methods.setSelected([item]);\n    }\n\n    dragged = false;\n  };\n\n  interactions.on('dragstart', handleDragStart);\n  interactions.on('down', handleDown);\n  interactions.on('up', handleUp);\n\n  const dispose = () => {\n    interactions.removeListener('dragstart', handleDragStart);\n    interactions.removeListener('down', handleDown);\n    interactions.removeListener('up', handleUp);\n  };\n\n  return {\n    name: 'select',\n    dispose,\n    update\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MXFlowSelectTool);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/systems/select.ts\n");

/***/ }),

/***/ "./src/systems/shortcut.ts":
/*!*********************************!*\
  !*** ./src/systems/shortcut.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var hotkeys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hotkeys-js */ \"./node_modules/hotkeys-js/dist/hotkeys.esm.js\");\n\n/**\r\n * Handlers for various shortcuts\r\n */\n\nfunction MXFlowShortcutTool(api, methods) {\n  const handleUndo = (e, handler) => {\n    if (!methods.eventInGraph(e)) return;\n    e.preventDefault();\n    e.stopPropagation();\n    methods.undo();\n  };\n\n  const handleRedo = (e, handler) => {\n    if (!methods.eventInGraph(e)) return;\n    e.preventDefault();\n    e.stopPropagation();\n    methods.redo();\n  };\n\n  const handleDelete = (e, handler) => {\n    if (!methods.eventInGraph(e)) return;\n    e.preventDefault();\n    e.stopPropagation();\n    methods.removeSelectedItems();\n  };\n\n  (0,hotkeys_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('delete', {\n    element: api.dom.containerEl\n  }, handleDelete);\n  (0,hotkeys_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('ctrl+z, command+z', {\n    element: api.dom.containerEl\n  }, handleUndo);\n  (0,hotkeys_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('ctrl+shift+z, command+shift+z, ctrl+y, command+y', {\n    element: api.dom.containerEl\n  }, handleRedo);\n\n  const dispose = () => {\n    hotkeys_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].unbind('delete', handleDelete);\n    hotkeys_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].unbind('ctrl+z, command+z', handleUndo);\n    hotkeys_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].unbind('ctrl+shift+z, command+shift+z, ctrl+y, command+y', handleRedo);\n  };\n\n  return {\n    name: 'shortcut',\n    dispose\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MXFlowShortcutTool);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzdGVtcy9zaG9ydGN1dC50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUVBO0FBRUE7O0FBRUc7O0FBQ0gsU0FBUyxrQkFBVCxDQUE0QixHQUE1QixFQUFnRCxPQUFoRCxFQUE4RjtBQUcxRixRQUFNLFVBQVUsR0FBRyxDQUFDLENBQUQsRUFBbUIsT0FBbkIsS0FBNEM7QUFDM0QsUUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFSLENBQXFCLENBQXJCLENBQUwsRUFBOEI7QUFFOUIsS0FBQyxDQUFDLGNBQUY7QUFDQSxLQUFDLENBQUMsZUFBRjtBQUVBLFdBQU8sQ0FBQyxJQUFSO0FBQ0gsR0FQRDs7QUFTQSxRQUFNLFVBQVUsR0FBRyxDQUFDLENBQUQsRUFBbUIsT0FBbkIsS0FBNEM7QUFDM0QsUUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFSLENBQXFCLENBQXJCLENBQUwsRUFBOEI7QUFFOUIsS0FBQyxDQUFDLGNBQUY7QUFDQSxLQUFDLENBQUMsZUFBRjtBQUVBLFdBQU8sQ0FBQyxJQUFSO0FBQ0gsR0FQRDs7QUFTQSxRQUFNLFlBQVksR0FBRyxDQUFDLENBQUQsRUFBbUIsT0FBbkIsS0FBNEM7QUFDN0QsUUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFSLENBQXFCLENBQXJCLENBQUwsRUFBOEI7QUFFOUIsS0FBQyxDQUFDLGNBQUY7QUFDQSxLQUFDLENBQUMsZUFBRjtBQUVBLFdBQU8sQ0FBQyxtQkFBUjtBQUNILEdBUEQ7O0FBU0Esd0RBQU8sQ0FBQyxRQUFELEVBQVc7QUFBRSxXQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUosQ0FBUTtBQUFuQixHQUFYLEVBQTZDLFlBQTdDLENBQVA7QUFDQSx3REFBTyxDQUFDLG1CQUFELEVBQXNCO0FBQUUsV0FBTyxFQUFFLEdBQUcsQ0FBQyxHQUFKLENBQVE7QUFBbkIsR0FBdEIsRUFBd0QsVUFBeEQsQ0FBUDtBQUNBLHdEQUFPLENBQUMsa0RBQUQsRUFBcUQ7QUFBRSxXQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUosQ0FBUTtBQUFuQixHQUFyRCxFQUF1RixVQUF2RixDQUFQOztBQUNBLFFBQU0sT0FBTyxHQUFHLE1BQUs7QUFDakIsOERBQWUsUUFBZixFQUF5QixZQUF6QjtBQUNBLDhEQUFlLG1CQUFmLEVBQW9DLFVBQXBDO0FBQ0EsOERBQWUsa0RBQWYsRUFBbUUsVUFBbkU7QUFDSCxHQUpEOztBQU1BLFNBQWU7QUFDWCxRQUFJLEVBQUUsVUFESztBQUVYO0FBRlcsR0FBZjtBQUlIOztBQUVELGlFQUFlLGtCQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXhmbG93Ly4vc3JjL3N5c3RlbXMvc2hvcnRjdXQudHM/MmU0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBGbG93VHlwZXMgZnJvbSAndHlwZXMvZmxvdy50eXBlcy52Mic7XHJcbmltcG9ydCB7IGdldFB1YmxpY0ludGVyZmFjZSB9IGZyb20gJy4uL21ldGhvZHMnO1xyXG5pbXBvcnQgaG90a2V5cywgeyBIb3RrZXlzRXZlbnQgfSBmcm9tICdob3RrZXlzLWpzJztcclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVycyBmb3IgdmFyaW91cyBzaG9ydGN1dHNcclxuICovXHJcbmZ1bmN0aW9uIE1YRmxvd1Nob3J0Y3V0VG9vbChhcGk6IEZsb3dUeXBlcy5BcGksIG1ldGhvZHM6IFJldHVyblR5cGU8dHlwZW9mIGdldFB1YmxpY0ludGVyZmFjZT4pIDogRmxvd1R5cGVzLkFjdGlvbkhhbmRsZXIge1xyXG5cclxuXHJcbiAgICBjb25zdCBoYW5kbGVVbmRvID0gKGU6IEtleWJvYXJkRXZlbnQsIGhhbmRsZXI6IEhvdGtleXNFdmVudCkgPT4ge1xyXG4gICAgICAgIGlmICghbWV0aG9kcy5ldmVudEluR3JhcGgoZSkpIHJldHVybjtcclxuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIG1ldGhvZHMudW5kbygpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZVJlZG8gPSAoZTogS2V5Ym9hcmRFdmVudCwgaGFuZGxlcjogSG90a2V5c0V2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKCFtZXRob2RzLmV2ZW50SW5HcmFwaChlKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgbWV0aG9kcy5yZWRvKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlRGVsZXRlID0gKGU6IEtleWJvYXJkRXZlbnQsIGhhbmRsZXI6IEhvdGtleXNFdmVudCkgPT4ge1xyXG4gICAgICAgIGlmICghbWV0aG9kcy5ldmVudEluR3JhcGgoZSkpIHJldHVybjtcclxuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIG1ldGhvZHMucmVtb3ZlU2VsZWN0ZWRJdGVtcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGhvdGtleXMoJ2RlbGV0ZScsIHsgZWxlbWVudDogYXBpLmRvbS5jb250YWluZXJFbCB9LCBoYW5kbGVEZWxldGUpO1xyXG4gICAgaG90a2V5cygnY3RybCt6LCBjb21tYW5kK3onLCB7IGVsZW1lbnQ6IGFwaS5kb20uY29udGFpbmVyRWwgfSwgaGFuZGxlVW5kbyk7XHJcbiAgICBob3RrZXlzKCdjdHJsK3NoaWZ0K3osIGNvbW1hbmQrc2hpZnQreiwgY3RybCt5LCBjb21tYW5kK3knLCB7IGVsZW1lbnQ6IGFwaS5kb20uY29udGFpbmVyRWwgfSwgaGFuZGxlUmVkbyk7XHJcbiAgICBjb25zdCBkaXNwb3NlID0gKCkgPT4ge1xyXG4gICAgICAgIGhvdGtleXMudW5iaW5kKCdkZWxldGUnLCBoYW5kbGVEZWxldGUpO1xyXG4gICAgICAgIGhvdGtleXMudW5iaW5kKCdjdHJsK3osIGNvbW1hbmQreicsIGhhbmRsZVVuZG8pO1xyXG4gICAgICAgIGhvdGtleXMudW5iaW5kKCdjdHJsK3NoaWZ0K3osIGNvbW1hbmQrc2hpZnQreiwgY3RybCt5LCBjb21tYW5kK3knLCBoYW5kbGVSZWRvKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gPGNvbnN0PiB7XHJcbiAgICAgICAgbmFtZTogJ3Nob3J0Y3V0JyxcclxuICAgICAgICBkaXNwb3NlXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1YRmxvd1Nob3J0Y3V0VG9vbDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/systems/shortcut.ts\n");

/***/ }),

/***/ "./src/types/flow.types.v2.ts":
/*!************************************!*\
  !*** ./src/types/flow.types.v2.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ActionTypes\": () => (/* binding */ ActionTypes),\n/* harmony export */   \"FlowAttr\": () => (/* binding */ FlowAttr),\n/* harmony export */   \"FlowClass\": () => (/* binding */ FlowClass),\n/* harmony export */   \"FlowItemType\": () => (/* binding */ FlowItemType),\n/* harmony export */   \"LinkLatchPosition\": () => (/* binding */ LinkLatchPosition)\n/* harmony export */ });\n/**\r\n * Posssible positions for link to latch to edge\r\n */\nvar LinkLatchPosition;\n\n(function (LinkLatchPosition) {\n  LinkLatchPosition[\"TOP\"] = \"top\";\n  LinkLatchPosition[\"RIGHT\"] = \"right\";\n  LinkLatchPosition[\"LEFT\"] = \"left\";\n  LinkLatchPosition[\"BOTTOM\"] = \"bottom\";\n  LinkLatchPosition[\"CENTER\"] = \"center\";\n})(LinkLatchPosition || (LinkLatchPosition = {})); // enum RenderableType {\n//     Node = 'node',\n//     Edge = 'edge',\n//     //Context = 'context'\n// }\n\n\nvar FlowItemType;\n\n(function (FlowItemType) {\n  FlowItemType[\"None\"] = \"none\";\n  FlowItemType[\"Graph\"] = \"graph\";\n  FlowItemType[\"Link\"] = \"link\";\n  FlowItemType[\"Node\"] = \"node\";\n  FlowItemType[\"Edge\"] = \"edge\";\n})(FlowItemType || (FlowItemType = {}));\n/**\r\n * The data attribute keys applied to all graph entities\r\n */\n\n\nvar FlowAttr;\n\n(function (FlowAttr) {\n  FlowAttr[\"Type\"] = \"data-mxflow-type\";\n  FlowAttr[\"Key\"] = \"data-mxflow-key\";\n  FlowAttr[\"NodeTemplate\"] = \"data-mxflow-node-template\";\n  FlowAttr[\"NodeContent\"] = \"data-mxflow-node-content\";\n  FlowAttr[\"EdgeGroup\"] = \"data-mxflow-edge-group\";\n  FlowAttr[\"EdgeLatch\"] = \"data-mxflow-edge-latch\";\n})(FlowAttr || (FlowAttr = {}));\n\nvar FlowClass;\n\n(function (FlowClass) {\n  FlowClass[\"Container\"] = \"mxflow-container\";\n  FlowClass[\"Root\"] = \"mxflow-root\";\n  FlowClass[\"RootPanning\"] = \"mxflow-root--panning\";\n  FlowClass[\"Background\"] = \"mxflow-background\";\n  FlowClass[\"Dots\"] = \"mxflow-dots\";\n  FlowClass[\"Grid\"] = \"mxflow-grid\";\n  FlowClass[\"GridInner\"] = \"mxflow-grid-inner\";\n  FlowClass[\"GridOuter\"] = \"mxflow-grid-outer\";\n  FlowClass[\"Context\"] = \"mxflow-context\";\n  FlowClass[\"ItemSelected\"] = \"mxflow-item--selected\";\n  FlowClass[\"ItemPreselected\"] = \"mxflow-item--preselected\";\n  FlowClass[\"Nodes\"] = \"mxflow-nodes\";\n  FlowClass[\"Node\"] = \"mxflow-node\";\n  FlowClass[\"NodeContent\"] = \"mxflow-node-content\";\n  FlowClass[\"EdgeGroup\"] = \"mxflow-edge-group\";\n  FlowClass[\"Edge\"] = \"mxflow-edge\";\n  FlowClass[\"EdgeValid\"] = \"mxflow-edge--valid\";\n  FlowClass[\"EdgeInvalid\"] = \"mxflow-edge--invalid\";\n  FlowClass[\"Lasso\"] = \"mxflow-lasso\";\n  FlowClass[\"Links\"] = \"mxlflow-links\";\n  FlowClass[\"Link\"] = \"mxflow-link\"; // LinkInner = 'mxflow-link-inner',\n  // LinkOuter = 'mxflow-link-outer',\n\n  FlowClass[\"LinkBand1\"] = \"mxflow-link-band1\";\n  FlowClass[\"LinkBand2\"] = \"mxflow-link-band2\";\n  FlowClass[\"LinkBand3\"] = \"mxflow-link-band3\";\n  FlowClass[\"LinkValid\"] = \"mxflow-link--valid\";\n  FlowClass[\"LinkInvalid\"] = \"mxflow-link--invalid\";\n  FlowClass[\"GhostLinks\"] = \"mxflow-ghost-links\";\n  FlowClass[\"GhostLink\"] = \"mxflow-ghost-link\";\n})(FlowClass || (FlowClass = {}));\n\nconst ActionTypes = {\n  TRANSFORM: 'transform',\n  SELECT: 'select',\n  DRAG: 'drag',\n  ADD_EDGE: 'addEdge',\n  REMOVE_EDGE: 'removeEdge',\n  ADD_NODE: 'addNode',\n  REMOVE_NODE: 'removeNode',\n  ADD_LINK: 'addLink',\n  REMOVE_LINK: 'removeLink',\n  REMOVE_ITEMS: 'removeItems',\n  CLEAR: 'clear',\n  CUSTOM: 'custom'\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdHlwZXMvZmxvdy50eXBlcy52Mi50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQXFMQTs7QUFFRztBQUNILElBQUssaUJBQUw7O0FBQUEsV0FBSyxpQkFBTCxFQUFzQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0gsQ0FORCxFQUFLLGlCQUFpQixLQUFqQixpQkFBaUIsTUFBdEIsR0E0RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUEsSUFBSyxZQUFMOztBQUFBLFdBQUssWUFBTCxFQUFpQjtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSCxDQU5ELEVBQUssWUFBWSxLQUFaLFlBQVksTUFBakI7QUFRQTs7QUFFRzs7O0FBQ0gsSUFBSyxRQUFMOztBQUFBLFdBQUssUUFBTCxFQUFhO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0gsQ0FQRCxFQUFLLFFBQVEsS0FBUixRQUFRLE1BQWI7O0FBU0EsSUFBSyxTQUFMOztBQUFBLFdBQUssU0FBTCxFQUFjO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQXJCVSxDQXNCVjtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0gsQ0EvQkQsRUFBSyxTQUFTLEtBQVQsU0FBUyxNQUFkOztBQStDQSxNQUFNLFdBQVcsR0FBVztBQUN4QixXQUFTLEVBQUUsV0FEYTtBQUV4QixRQUFNLEVBQUUsUUFGZ0I7QUFHeEIsTUFBSSxFQUFFLE1BSGtCO0FBSXhCLFVBQVEsRUFBRSxTQUpjO0FBS3hCLGFBQVcsRUFBRSxZQUxXO0FBTXhCLFVBQVEsRUFBRSxTQU5jO0FBT3hCLGFBQVcsRUFBRSxZQVBXO0FBUXhCLFVBQVEsRUFBRSxTQVJjO0FBU3hCLGFBQVcsRUFBRSxZQVRXO0FBVXhCLGNBQVksRUFBRSxhQVZVO0FBV3hCLE9BQUssRUFBRSxPQVhpQjtBQVl4QixRQUFNLEVBQUU7QUFaZ0IsQ0FBNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teGZsb3cvLi9zcmMvdHlwZXMvZmxvdy50eXBlcy52Mi50cz9jM2M1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1YRmxvd0NvbnRyb2xsZXJJbnN0YW5jZSB9IGZyb20gXCIuLi9mbG93XCI7XHJcbmltcG9ydCB7IGdldFB1YmxpY0ludGVyZmFjZSB9IGZyb20gJy4uL21ldGhvZHMnO1xyXG5cclxudHlwZSBOb09wdGlvbmFsczxUPiA9IHtcclxuICAgIFtQIGluIGtleW9mIFRdLT86IFRbUF07XHJcbn07XHJcblxyXG5pbnRlcmZhY2UgUmVjdCB7XHJcbiAgICBsZWZ0OiBudW1iZXIsXHJcbiAgICByaWdodDogbnVtYmVyLFxyXG4gICAgdG9wOiBudW1iZXIsXHJcbiAgICBib3R0b206IG51bWJlclxyXG59XHJcblxyXG5pbnRlcmZhY2UgRmxvd0RvbSB7XHJcbiAgICBpbnN0YW5jZUlkOiBzdHJpbmcsXHJcbiAgICBjb250YWluZXJFbDogSFRNTERpdkVsZW1lbnRcclxuICAgIGxhc3NvRWw6IFNWR0VsZW1lbnRcclxuICAgIGNvbnRleHRFbDogSFRNTERpdkVsZW1lbnRcclxuICAgIHJvb3RFbDogSFRNTERpdkVsZW1lbnRcclxuICAgIGJnRWw6IEhUTUxEaXZFbGVtZW50LFxyXG4gICAgbm9kZUNvbnRhaW5lckVsOiBIVE1MRGl2RWxlbWVudFxyXG4gICAgbGlua0NvbnRhaW5lckVsOiBTVkdFbGVtZW50XHJcbiAgICBnaG9zdExpbmtDb250YWluZXJFbDogU1ZHRWxlbWVudFxyXG4gICAgZ2hvc3RMaW5rRWw6IFNWR1BhdGhFbGVtZW50XHJcbn1cclxuXHJcbmludGVyZmFjZSBGbG93U3RhdGUge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc2luZ3VsYXIgXCJncmFwaFwiIGl0ZW1cclxuICAgICAqL1xyXG4gICAgcm9vdDogR3JhcGgsXHJcbiAgICAvKipcclxuICAgICAqIEVudGl0eSBjb2xsZWN0aW9uc1xyXG4gICAgICovXHJcbiAgICBub2RlczogTWFwPHN0cmluZywgTm9kZT4sXHJcbiAgICBlZGdlczogTWFwPHN0cmluZywgRWRnZT4sXHJcbiAgICBsaW5rczogTWFwPHN0cmluZywgTGluaz4sXHJcbiAgICAvKipcclxuICAgICAqIFByZXNlbGVjdGlvbiAoZm9yIGxhc3NvIHRvb2wpIGFuZCBzZWxlY3Rpb24gY29sbGVjdGlvbnNcclxuICAgICAqL1xyXG4gICAgcHJlc2VsZWN0ZWQ6IE1hcDxzdHJpbmcsIFNlbGVjdGFibGVJdGVtPixcclxuICAgIHNlbGVjdGVkOiBNYXA8c3RyaW5nLCBTZWxlY3RhYmxlSXRlbT4sXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdGhlIGNvbnRleHQgbWVudSBpcyBjdXJyZW50bHkgb3BlblxyXG4gICAgICovXHJcbiAgICBjb250ZXh0T3BlbjogYm9vbGVhbixcclxuXHJcbiAgICAvLyBtdWx0aTogYm9vbGVhbixcclxuICAgIHVuZG86IEFjdGlvbltdLFxyXG4gICAgcmVkbzogQWN0aW9uW10sXHJcbiAgICB0cmFuc2Zvcm06IFRyYW5zZm9ybVxyXG59XHJcblxyXG5pbnRlcmZhY2UgRmxvd0ludGVybmFsQXBpIHtcclxuICAgIG9wdHM6IE9wdGlvbnMsXHJcbiAgICBkb206IEZsb3dEb20sXHJcbiAgICBzdGF0ZTogRmxvd1N0YXRlLFxyXG4gICAgc2V0U2VsZWN0ZWQ6IChzZWxlY3RlZDogU2VsZWN0YWJsZUl0ZW1bXSB8IE1hcDxzdHJpbmcsIFNlbGVjdGFibGVJdGVtPikgPT4gdm9pZCxcclxuICAgIGFkZFRvU2VsZWN0aW9uOiAoaXRlbXM6IFNlbGVjdGFibGVJdGVtW10pID0+IHZvaWQsXHJcbiAgICByZW1vdmVGcm9tU2VsZWN0aW9uOiAoa2V5czogc3RyaW5nW10pID0+IHZvaWQsXHJcbiAgICBlbWl0OiA8SyBleHRlbmRzIGtleW9mIEZsb3dFdmVudE1hcD4odHlwZTogSywgZXZlbnQ/OiBGbG93RXZlbnRNYXBbS10pID0+IHZvaWRcclxufVxyXG5cclxuaW50ZXJmYWNlIFRyYW5zZm9ybU1vZGVsIHtcclxuICAgIHNjYWxlOiBudW1iZXIsXHJcbiAgICB4OiBudW1iZXIsXHJcbiAgICB5OiBudW1iZXJcclxufVxyXG5cclxuaW50ZXJmYWNlIE5vZGVNb2RlbCB7XHJcbiAgICBzZWxlY3RlZDogYm9vbGVhbixcclxuICAgIHg6IG51bWJlcixcclxuICAgIHk6IG51bWJlcixcclxuICAgIHdpZHRoOiBudW1iZXIgfCBzdHJpbmcsXHJcbiAgICBoZWlnaHQ6IG51bWJlciB8IHN0cmluZyxcclxuICAgIGNsYXNzOiBzdHJpbmdbXSxcclxuICAgIGRhdGE6IFNlcmlhbGl6YWJsZVxyXG59XHJcblxyXG5pbnRlcmZhY2UgRWRnZU1vZGVsIHtcclxuICAgIG5vZGVLZXk6IHN0cmluZyxcclxuICAgIGVkZ2VLZXk6IHN0cmluZyxcclxuICAgIGdyb3VwS2V5OiBzdHJpbmcsXHJcbiAgICBkYXRhOiBTZXJpYWxpemFibGUsXHJcbiAgICBjbGFzczogc3RyaW5nXHJcbn1cclxuXHJcbmludGVyZmFjZSBMaW5rTW9kZWwge1xyXG4gICAgc2VsZWN0ZWQ6IGJvb2xlYW4sXHJcbiAgICBmcm9tTm9kZTogc3RyaW5nLFxyXG4gICAgZnJvbUVkZ2U6IHN0cmluZyxcclxuICAgIHRvTm9kZTogc3RyaW5nLFxyXG4gICAgdG9FZGdlOiBzdHJpbmcsXHJcbiAgICBkYXRhOiBTZXJpYWxpemFibGVcclxufVxyXG5cclxuaW50ZXJmYWNlIE1vZGVsIHtcclxuICAgIHRyYW5zZm9ybTogVHJhbnNmb3JtTW9kZWwsXHJcbiAgICBub2RlczogeyBba2V5OnN0cmluZ106IE5vZGVNb2RlbCB9LFxyXG4gICAgZWRnZXM6IHsgW2tleTogc3RyaW5nXTogRWRnZU1vZGVsIH0sXHJcbiAgICBsaW5rczogeyBba2V5OnN0cmluZ106IExpbmtNb2RlbCB9XHJcbn1cclxuXHJcbnR5cGUgQ29udGVudE1vZGVsSXRlbSA9IE5vZGVNb2RlbCB8IEVkZ2VNb2RlbDsgLy9Nb2RlbCBpdGVtcyB3aG9zZSBhY3R1YWwgaXRlbXMgaGF2ZSBjb250ZW50IHNlY3Rpb25zXHJcblxyXG5cclxuaW50ZXJmYWNlIFNlcmlhbGl6YWJsZSB7XHJcbiAgICBba2V5OnN0cmluZ106IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkIHwgU2VyaWFsaXphYmxlO1xyXG59XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIERyYWcgQ29udHJvbGxlciBUeXBlc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcbmludGVyZmFjZSBHcmFwaCB7XHJcbiAgICBrZXk6ICdncmFwaCcsXHJcbiAgICB0eXBlOiBGbG93SXRlbVR5cGUuR3JhcGgsXHJcbiAgICBlbDogSFRNTEVsZW1lbnRcclxufVxyXG5cclxuaW50ZXJmYWNlIE5vZGUge1xyXG4gICAgdHlwZTogRmxvd0l0ZW1UeXBlLk5vZGUsXHJcbiAgICBrZXk6IHN0cmluZyxcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRlbXBsYXRlIHVzZWQgdG8gZ2VuZXJhdGUgdGhpcyBub2RlLiBUaGlzIHZhbHVlIGlzIGF1dG9wb3B1bGF0ZWQgYmFzZWQgb24gdGhlIGdsb2JhbFxyXG4gICAgICogYG5vZGVIVE1MVGVtcGxhdGVgIG9wdGlvbiwgYnV0IGNhbiBiZSBzcGVjaWZpZWQgaW5kaXZpZHVhbGx5IHdoZW4gY3JlYXRpbmcgYSBub2RlLlxyXG4gICAgICovXHJcbiAgICB0ZW1wbGF0ZTogc3RyaW5nLFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgb3V0ZXIgbm9kZSBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIGVsOiBIVE1MRWxlbWVudCxcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGNvbnRhaW5lciBmb3IgcmVuZGVyZWQgY29udGVudFxyXG4gICAgICovXHJcbiAgICBjb250ZW50RWw6IEhUTUxFbGVtZW50LFxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXAgb2YgZWRnZSBncm91cHMgZ2VuZXJhdGVkIGFmdGVyIHRlbXBhbHRlIHBhcnNpbmdcclxuICAgICAqL1xyXG4gICAgZWRnZUdyb3VwczogTWFwPHN0cmluZywgRWRnZUdyb3VwPixcclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5vZGUncyBjdXJyZW50IHBvc2l0aW9uIGFuZCBzaXplXHJcbiAgICAgKi9cclxuICAgIHg6IG51bWJlcixcclxuICAgIHk6IG51bWJlcixcclxuICAgIHo6IG51bWJlcixcclxuICAgIHdpZHRoOiBudW1iZXIgfCBzdHJpbmcsXHJcbiAgICBoZWlnaHQ6IG51bWJlciAgfCBzdHJpbmcsXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBub2RlJ3Mgb2Zmc2V0IHBvc2l0aW9uIGR1cmluZyBhIGRyYWcgb3BlcmF0aW9uLiBBbHdheXMgemVybyB1bmxlc3NcclxuICAgICAqIGFjdGl2ZWx5IGRyYWdnaW5nLlxyXG4gICAgICovXHJcbiAgICBkZWx0YVg6IG51bWJlcixcclxuICAgIGRlbHRhWTogbnVtYmVyLFxyXG4gICAgLyoqXHJcbiAgICAgKiBDb250YWluZXIgZm9yIGFueSB1c2VyLWF0dGFjaGVkIGRhdGEgZm9yIHRoaXMgbm9kZVxyXG4gICAgICovXHJcbiAgICBkYXRhOiBTZXJpYWxpemFibGVcclxuICAgIC8qKlxyXG4gICAgICogVXNlciBjbGFzc2VzXHJcbiAgICAgKi9cclxuICAgIGNsYXNzOiBzdHJpbmdbXVxyXG59XHJcblxyXG50eXBlIEFkZE5vZGVPcHRpb25zID0ge1xyXG4gICAgY2xhc3M/OiBzdHJpbmcgfCBzdHJpbmdbXSxcclxuICAgIGRhdGE/OiBTZXJpYWxpemFibGUsXHJcbiAgICB3aWR0aD86IHN0cmluZyB8IG51bWJlcixcclxuICAgIGhlaWdodD86IHN0cmluZyB8IG51bWJlcixcclxuICAgIGVkZ2VzPzogeyBcclxuICAgICAgICBncm91cDogc3RyaW5nLCBcclxuICAgICAgICBrZXk6IHN0cmluZywgXHJcbiAgICAgICAgZGF0YT86IFNlcmlhbGl6YWJsZSxcclxuICAgICAgICBjbGFzcz86IHN0cmluZ1xyXG4gICAgfVtdLFxyXG4gICAgeD86IG51bWJlcixcclxuICAgIHk/OiBudW1iZXIsXHJcbn0gJiBBY3Rpb25FeHRlbmRlZE9wdHM7XHJcblxyXG4vKipcclxuICogUG9zc3NpYmxlIHBvc2l0aW9ucyBmb3IgbGluayB0byBsYXRjaCB0byBlZGdlXHJcbiAqL1xyXG5lbnVtIExpbmtMYXRjaFBvc2l0aW9uIHtcclxuICAgIFRPUCA9ICd0b3AnLFxyXG4gICAgUklHSFQgPSAncmlnaHQnLFxyXG4gICAgTEVGVCA9ICdsZWZ0JyxcclxuICAgIEJPVFRPTSA9ICdib3R0b20nLFxyXG4gICAgQ0VOVEVSID0gJ2NlbnRlcidcclxufVxyXG5cclxuaW50ZXJmYWNlIEVkZ2VHcm91cCB7XHJcbiAgICBncm91cEtleTogc3RyaW5nLFxyXG4gICAgZ3JvdXBFbDogSFRNTFVMaXN0RWxlbWVudCxcclxuICAgIGxhdGNoUG9zOiBMaW5rTGF0Y2hQb3NpdGlvblxyXG59XHJcblxyXG5pbnRlcmZhY2UgRWRnZSB7XHJcbiAgICB0eXBlOiBGbG93SXRlbVR5cGUuRWRnZSxcclxuICAgIGdyb3VwOiBFZGdlR3JvdXAsXHJcbiAgICBrZXk6IHN0cmluZywgLy9UaGUgY29tcG9zaXRlIGtleVxyXG4gICAgbm9kZUtleTogc3RyaW5nLFxyXG4gICAgZWRnZUtleTogc3RyaW5nLFxyXG4gICAgZWw6IEhUTUxFbGVtZW50LFxyXG4gICAgZGF0YTogU2VyaWFsaXphYmxlLFxyXG4gICAgY2xhc3M6IHN0cmluZ1xyXG59XHJcblxyXG50eXBlIEFkZEVkZ2VPcHRpb25zID0ge1xyXG4gICAgZGF0YT86IFNlcmlhbGl6YWJsZVxyXG4gICAgY2xhc3M/OiBzdHJpbmdcclxufSAmIEFjdGlvbkV4dGVuZGVkT3B0cztcclxuXHJcbmludGVyZmFjZSBMaW5rIHtcclxuICAgIHR5cGU6IEZsb3dJdGVtVHlwZS5MaW5rLFxyXG4gICAga2V5OiBzdHJpbmcsIC8vVGhlIGNvbXBvc2l0ZSBrZXlcclxuICAgIGZyb21Ob2RlOiBzdHJpbmcsXHJcbiAgICBmcm9tRWRnZTogc3RyaW5nLFxyXG4gICAgdG9Ob2RlOiBzdHJpbmcsXHJcbiAgICB0b0VkZ2U6IHN0cmluZ1xyXG4gICAgZWw6IFNWR0dFbGVtZW50LFxyXG4gICAgLy8gaW5uZXJFbDogU1ZHUGF0aEVsZW1lbnQsXHJcbiAgICAvLyBvdXRlckVsOiBTVkdQYXRoRWxlbWVudCxcclxuICAgIGJhbmQxOiBTVkdQYXRoRWxlbWVudCxcclxuICAgIGJhbmQyOiBTVkdQYXRoRWxlbWVudCxcclxuICAgIGJhbmQzOiBTVkdQYXRoRWxlbWVudCxcclxuICAgIGxhYmVsRWw6IFNWR1RleHRQYXRoRWxlbWVudCxcclxuICAgIGRhdGE6IFNlcmlhbGl6YWJsZVxyXG4gICAgLy8gZk9iamVjdDogU1ZHRm9yZWlnbk9iamVjdEVsZW1lbnQsXHJcbiAgICAvLyBjb250ZW50OiBIVE1MRWxlbWVudFxyXG59XHJcblxyXG50eXBlIEFkZExpbmtPcHRpb25zID0ge1xyXG4gICAgY2xhc3M/OiBzdHJpbmcsXHJcbiAgICBkYXRhPzogU2VyaWFsaXphYmxlXHJcbn0gJiBBY3Rpb25FeHRlbmRlZE9wdHM7XHJcblxyXG5pbnRlcmZhY2UgR2hvc3RMaW5rIHtcclxuICAgIGVsOiBTVkdFbGVtZW50LFxyXG4gICAgcGF0aEVsOiBTVkdFbGVtZW50XHJcbn1cclxuXHJcbmludGVyZmFjZSBMaW5rU3RhdGUge1xyXG4gICAgYWN0aXZlOiBib29sZWFuLFxyXG4gICAgZWRnZVJlY3Q6IFJlY3QgfCBudWxsLFxyXG4gICAgZnJvbUVkZ2U6IEVkZ2UgfCBudWxsXHJcbn1cclxuXHJcbmludGVyZmFjZSBDcmVhdGVMaW5rUGFyYW1zIHsgXHJcbiAgICBmcm9tTm9kZTogc3RyaW5nLCBcclxuICAgIHRvTm9kZTogc3RyaW5nLCBcclxuICAgIGZyb21FZGdlOiBzdHJpbmcsIFxyXG4gICAgdG9FZGdlOiBzdHJpbmdcclxufVxyXG5cclxuLyoqXHJcbiAqIEdyYXBoIGVudGl0aWVzXHJcbiAqL1xyXG50eXBlIEZsb3dJdGVtID0gR3JhcGggfCBOb2RlIHwgRWRnZSB8IExpbms7IC8vQWxsIGl0ZW1zXHJcblxyXG4vKipcclxuICogVmFsaWQgaXRlbXMgZm9yIHNlbGVjdGlvblxyXG4gKi9cclxudHlwZSBTZWxlY3RhYmxlSXRlbSA9IE5vZGUgfCBMaW5rOyAvL0l0ZW1zIHdoaWNoIGNhbiBiZSBzZWxlY3RlZFxyXG5cclxuLyoqXHJcbiAqIFZhbGlkIHRhcmdldCBpdGVtcyBmb3IgY29udGV4dCBtZW51XHJcbiAqL1xyXG50eXBlIENvbnRleHRUYXJnZXRJdGVtID0gR3JhcGggfCBOb2RlIHwgRWRnZSB8IExpbms7XHJcblxyXG4vKipcclxuICogSXRlbSB0eXBlcyB3aGljaCBoYXZlIGEgcmVuZGVyYWJsZSBjb250ZW50IHNlY3Rpb25cclxuICovXHJcbnR5cGUgUmVuZGVyYWJsZVR5cGUgPSAnbm9kZScgfCAnZWRnZSc7XHJcbnR5cGUgUmVuZGVyYWJsZUl0ZW0gPSBOb2RlIHwgRWRnZTtcclxuLy8gZW51bSBSZW5kZXJhYmxlVHlwZSB7XHJcbi8vICAgICBOb2RlID0gJ25vZGUnLFxyXG4vLyAgICAgRWRnZSA9ICdlZGdlJyxcclxuLy8gICAgIC8vQ29udGV4dCA9ICdjb250ZXh0J1xyXG4vLyB9XHJcblxyXG5lbnVtIEZsb3dJdGVtVHlwZSB7XHJcbiAgICBOb25lID0gJ25vbmUnLFxyXG4gICAgR3JhcGggPSAnZ3JhcGgnLFxyXG4gICAgTGluayA9ICdsaW5rJyxcclxuICAgIE5vZGUgPSAnbm9kZScsXHJcbiAgICBFZGdlID0gJ2VkZ2UnXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgZGF0YSBhdHRyaWJ1dGUga2V5cyBhcHBsaWVkIHRvIGFsbCBncmFwaCBlbnRpdGllc1xyXG4gKi9cclxuZW51bSBGbG93QXR0ciB7XHJcbiAgICBUeXBlID0gJ2RhdGEtbXhmbG93LXR5cGUnLFxyXG4gICAgS2V5ID0gJ2RhdGEtbXhmbG93LWtleScsXHJcbiAgICBOb2RlVGVtcGxhdGUgPSAnZGF0YS1teGZsb3ctbm9kZS10ZW1wbGF0ZScsXHJcbiAgICBOb2RlQ29udGVudCA9ICdkYXRhLW14Zmxvdy1ub2RlLWNvbnRlbnQnLFxyXG4gICAgRWRnZUdyb3VwID0gJ2RhdGEtbXhmbG93LWVkZ2UtZ3JvdXAnLFxyXG4gICAgRWRnZUxhdGNoID0gJ2RhdGEtbXhmbG93LWVkZ2UtbGF0Y2gnLFxyXG59XHJcblxyXG5lbnVtIEZsb3dDbGFzcyB7XHJcbiAgICBDb250YWluZXIgPSAnbXhmbG93LWNvbnRhaW5lcicsXHJcbiAgICBSb290ID0gJ214Zmxvdy1yb290JyxcclxuICAgIFJvb3RQYW5uaW5nID0gJ214Zmxvdy1yb290LS1wYW5uaW5nJyxcclxuICAgIEJhY2tncm91bmQgPSAnbXhmbG93LWJhY2tncm91bmQnLFxyXG4gICAgRG90cyA9ICdteGZsb3ctZG90cycsXHJcbiAgICBHcmlkID0gJ214Zmxvdy1ncmlkJyxcclxuICAgIEdyaWRJbm5lciA9ICdteGZsb3ctZ3JpZC1pbm5lcicsXHJcbiAgICBHcmlkT3V0ZXIgPSAnbXhmbG93LWdyaWQtb3V0ZXInLFxyXG4gICAgQ29udGV4dCA9ICdteGZsb3ctY29udGV4dCcsXHJcbiAgICBJdGVtU2VsZWN0ZWQgPSAnbXhmbG93LWl0ZW0tLXNlbGVjdGVkJyxcclxuICAgIEl0ZW1QcmVzZWxlY3RlZCA9ICdteGZsb3ctaXRlbS0tcHJlc2VsZWN0ZWQnLFxyXG4gICAgTm9kZXMgPSAnbXhmbG93LW5vZGVzJyxcclxuICAgIE5vZGUgPSAnbXhmbG93LW5vZGUnLFxyXG4gICAgTm9kZUNvbnRlbnQgPSAnbXhmbG93LW5vZGUtY29udGVudCcsXHJcbiAgICBFZGdlR3JvdXAgPSAnbXhmbG93LWVkZ2UtZ3JvdXAnLFxyXG4gICAgRWRnZSA9ICdteGZsb3ctZWRnZScsXHJcbiAgICBFZGdlVmFsaWQgPSAnbXhmbG93LWVkZ2UtLXZhbGlkJyxcclxuICAgIEVkZ2VJbnZhbGlkID0gJ214Zmxvdy1lZGdlLS1pbnZhbGlkJyxcclxuICAgIExhc3NvID0gJ214Zmxvdy1sYXNzbycsXHJcbiAgICBMaW5rcyA9ICdteGxmbG93LWxpbmtzJyxcclxuICAgIExpbmsgPSAnbXhmbG93LWxpbmsnLFxyXG4gICAgLy8gTGlua0lubmVyID0gJ214Zmxvdy1saW5rLWlubmVyJyxcclxuICAgIC8vIExpbmtPdXRlciA9ICdteGZsb3ctbGluay1vdXRlcicsXHJcbiAgICBMaW5rQmFuZDEgPSAnbXhmbG93LWxpbmstYmFuZDEnLFxyXG4gICAgTGlua0JhbmQyID0gJ214Zmxvdy1saW5rLWJhbmQyJyxcclxuICAgIExpbmtCYW5kMyA9ICdteGZsb3ctbGluay1iYW5kMycsXHJcbiAgICBMaW5rVmFsaWQgPSAnbXhmbG93LWxpbmstLXZhbGlkJyxcclxuICAgIExpbmtJbnZhbGlkID0gJ214Zmxvdy1saW5rLS1pbnZhbGlkJyxcclxuICAgIEdob3N0TGlua3MgPSAnbXhmbG93LWdob3N0LWxpbmtzJyxcclxuICAgIEdob3N0TGluayA9ICdteGZsb3ctZ2hvc3QtbGluaycsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHcmFwaCB0cmFuc2Zvcm0gc3RhdGUsIHBhcnQgb2YgdGhlIGxhcmdlciBzdGF0ZSBvYmplY3RcclxuICovXHJcbmludGVyZmFjZSBUcmFuc2Zvcm0ge1xyXG4gICAgc2NhbGU6IG51bWJlcixcclxuICAgIHg6IG51bWJlcixcclxuICAgIHk6IG51bWJlclxyXG59XHJcblxyXG4vKipcclxuICogUGVyc2lzdGFibGUgYWN0aW9uIHR5cGVzIHVzZWQgZm9yIGRvL3VuZG8uIFRoZXNlIHR5cGVzIGFyZSB1c2VkIHRvIFxyXG4gKiBkZWZpbmUgd2hpY2ggYWN0aW9ucyBzaG91bGQgYmUgcmVjb3JkZWQgaW4gdGhlIG1haW4gb3B0aW9ucy5cclxuICovXHJcbnR5cGUgQWN0aW9uVHlwZSA9IHR5cGVvZiBBY3Rpb25UeXBlc1trZXlvZiB0eXBlb2YgQWN0aW9uVHlwZXNdO1xyXG5jb25zdCBBY3Rpb25UeXBlcyA9IDxjb25zdD4ge1xyXG4gICAgVFJBTlNGT1JNOiAndHJhbnNmb3JtJyxcclxuICAgIFNFTEVDVDogJ3NlbGVjdCcsXHJcbiAgICBEUkFHOiAnZHJhZycsXHJcbiAgICBBRERfRURHRTogJ2FkZEVkZ2UnLFxyXG4gICAgUkVNT1ZFX0VER0U6ICdyZW1vdmVFZGdlJyxcclxuICAgIEFERF9OT0RFOiAnYWRkTm9kZScsXHJcbiAgICBSRU1PVkVfTk9ERTogJ3JlbW92ZU5vZGUnLFxyXG4gICAgQUREX0xJTks6ICdhZGRMaW5rJyxcclxuICAgIFJFTU9WRV9MSU5LOiAncmVtb3ZlTGluaycsXHJcbiAgICBSRU1PVkVfSVRFTVM6ICdyZW1vdmVJdGVtcycsXHJcbiAgICBDTEVBUjogJ2NsZWFyJyxcclxuICAgIENVU1RPTTogJ2N1c3RvbSdcclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGdyYXBoIGFjdGlvbiBpbnN0YW5jZVxyXG4gKi9cclxuaW50ZXJmYWNlIEFjdGlvbiB7XHJcbiAgICB0eXBlOiBBY3Rpb25UeXBlLFxyXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmcsXHJcbiAgICBtb2RlbDogTW9kZWxcclxufVxyXG5cclxuLyoqXHJcbiAqIE9wdGlvbnMgZm9yIHRoZSBgZHJhZ2Agc3lzdGVtXHJcbiAqL1xyXG5pbnRlcmZhY2UgRHJhZ09wdGlvbnMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZWxlY3RvciB0byBjYW5jZWwgZHJhZy4gRGVmaW5lIGEgc2VsZWN0b3IgKGNsYXNzLCBkYXRhIGF0dHJpYnV0ZSwgZXRjLikgYW5kIGFwcGx5XHJcbiAgICAgKiBpdCB0byBhbnkgZWxlbWVudHMgd2l0aGluIGEgbm9kZSB3aGljaCBzaG91bGQgbm90IHRyaWdnZXIgYSBkcmFnIG9wZXJhdGlvbi4gVGhpcyBzZXR0aW5nXHJcbiAgICAgKiBvdmVycmlkZXMgdGhlIGBoYW5kbGVTZWxlY3RvcmAgc2V0dGluZy4gTm8gdmFsdWUgYnkgZGVmYXVsdC5cclxuICAgICAqL1xyXG4gICAgY2FuY2VsU2VsZWN0b3I/OiBzdHJpbmcsXHJcbiAgICAvKipcclxuICAgICAqIFNlbGVjdG9yIGZvciB0aGUgZHJhZyBcImhhbmRsZVwiIGkuZS4gc3BvdCB3aGVyZSBkcmFnZ2luZyBtYXkgb2NjdXIuIE5vIHZhbHVlIGJ5IGRlZmF1bHQuXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVNlbGVjdG9yPzogc3RyaW5nLFxyXG4gICAgLyoqXHJcbiAgICAgKiBHcmlkIFgsIGFueSB2YWx1ZSB6ZXJvIG9yIGJlbG93IHdpbGwgZGlzYWJsZSB0aGUgZ3JpZCBvbiB0aGUgeCBheGlzLiBEZWZhdWx0IGlzIGAwYC5cclxuICAgICAqL1xyXG4gICAgZ3JpZFg/OiBudW1iZXIsXHJcbiAgICAvKipcclxuICAgICAqIEdyaWQgWSwgYW55IHZhbHVlIHplcm8gb3IgYmVsb3cgd2lsbCBkaXNhYmxlIHRoZSBncmlkIG9uIHRoZSB4IGF4aXMuIERlZmF1bHQgaXMgYDBgLlxyXG4gICAgICovXHJcbiAgICBncmlkWT86IG51bWJlcixcclxuICAgIC8qKlxyXG4gICAgICogTnVtYmVyIG9mIHBpeGVscyBhIGRyYWcgb3BlcmF0aW9uIG11c3QgbW92ZSBiZWZvcmUgY29uc2lkZXJlZCBgbGF0Y2hlZGAuIFRoZSBgZHJhZ2AgYWN0aW9uXHJcbiAgICAgKiBpcyBub3QgcmVjb3JkZWQgYW5kIGBkcmFnYCBldmVudCBub3QgZW1pdHRlZCB1bnRpbCBsYXRjaC4gRGVmYXVsdCBpcyBgNWAuXHJcbiAgICAgKi9cclxuICAgIGxhdGNoVGhyZXNob2xkPzogbnVtYmVyXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBPcHRpb25zIGZvciB0aGUgYHNlbGVjdGBcclxuICovXHJcbmludGVyZmFjZSBTZWxlY3RPcHRpb25zIHtcclxuICAgIC8qKlxyXG4gICAgICogV2hlbiBzZXQgdG8gdHJ1ZSAoZGVmYXVsdCkgbXVsdGlwbGUgaXRlbXMgY2FuIGJlIHNlbGVjdGVkLiBOb3RlIHRoYXRcclxuICAgICAqIHRoaXMgb25seSBhZmZlY3RzIFwic2hpZnQrY2xpY2tcIiB0eXBlIG9wZXJhdGlvbnMuIFRoZXJlIGFyZSBvdGhlciB3YXlzIHRvIHNlbGVjdCBtdWx0aXBsZVxyXG4gICAgICogaXRlbXMgd2hpY2ggYXJlIHVuYWZmZWN0ZWQgKGxhc3NvIHRvb2wsIG1hbnVhbGx5IHNlbGVjdGluZyBpdGVtcyB2aWEgYHNldFNlbGVjdGVkYCkuXHJcbiAgICAgKi9cclxuICAgIG11bHRpU2VsZWN0RW5hYmxlZD86IGJvb2xlYW4sXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEby91bmRvIG9wdGlvbnNcclxuICovXHJcbmludGVyZmFjZSBVbmRvT3B0aW9ucyB7XHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdW5kbyBpcyBlbmFibGVkIGF0IGFsbC5cclxuICAgICAqL1xyXG4gICAgZW5hYmxlZD86IGJvb2xlYW4sXHJcbiAgICAvKipcclxuICAgICAqIE1heCBudW1iZXIgb2YgYWN0aW9ucyB0byByZWNvcmQuIEEgbGFyZ2UgbnVtYmVyIG9mIGFjdGlvbnMgY2FuIGhhdmUgYSBzaWduaWZpY2FudCBtZW1vcnkgZm9vdHByaW50XHJcbiAgICAgKiBmb3IgY29tcGxleCBncmFwaHMuIERlZmF1bHQgaXMgYDUwYC5cclxuICAgICAqL1xyXG4gICAgbWF4PzogbnVtYmVyLFxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBhcnJheSBvZiBhY3Rpb24gdHlwZXMgd2hpY2ggY2FuIGJlIHVuZG9uZS4gQnkgZGVmYXVsdCwgbW9zdCBhY3Rpb25zIGFyZSByZWNvcmRlZC4gSWYgb3ZlcnJpZGluZywgYmVcclxuICAgICAqIHN1cmUgdG8gaW5jbHVkZSBBTEwgYWN0aW9uIHR5cGVzIHlvdSB3aGljaCB0byBiZSB1bmRvYWJsZS5cclxuICAgICAqIFxyXG4gICAgICovXHJcbiAgICBhY3Rpb25zPzogQWN0aW9uVHlwZVtdXHJcbn1cclxuXHJcbmludGVyZmFjZSBMYXNzb09wdGlvbnMge1xyXG4gICAgZW5hYmxlZDogYm9vbGVhbixcclxufVxyXG5cclxuLyoqXHJcbiAqIE9wdGlvbnMgZm9yIHRoZSBgcGFuem9vbWAgc3lzdGVtXHJcbiAqL1xyXG5pbnRlcmZhY2UgUGFuWm9vbU9wdGlvbnMge1xyXG4gICAgZW5hYmxlZD86IGJvb2xlYW4sXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBpbml0aWFsIHggcG9zaXRpb24gb2YgdGhlIHZpZXdwb3J0XHJcbiAgICAgKi9cclxuICAgIHg/OiBudW1iZXIsXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBpbml0aWFsIHkgcG9zaXRpb24gb2YgdGhlIHZpZXdwb3J0XHJcbiAgICAgKi9cclxuICAgIHk/OiBudW1iZXIsXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBpbml0aWFsIHNjYWxlXHJcbiAgICAgKi9cclxuICAgIHNjYWxlPzogbnVtYmVyLFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc21hbGxlc3Qgc2NhbGUgYWxsb3dlZCAoem9vbSBvdXQpXHJcbiAgICAgKi9cclxuICAgIG1pblNjYWxlPzogbnVtYmVyLFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbGFyZ2VzdCBzY2FsZSBhbGxvd2VkICh6b29tIGluKVxyXG4gICAgICovXHJcbiAgICBtYXhTY2FsZT86IG51bWJlcixcclxuICAgIC8qKlxyXG4gICAgICogU3RlcCBhbW91bnQgd2hlbiB6b29taW5nIGluIG9yIG91dFxyXG4gICAgICovXHJcbiAgICBzY2FsZVN0ZXA/OiBudW1iZXJcclxufVxyXG5cclxuaW50ZXJmYWNlIEJhY2tncm91bmRPcHRpb25zIHtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGJhY2tncm91bmQgdHlwZVxyXG4gICAgICovXHJcbiAgICB0eXBlPzogJ2dyaWQnIHwgJ2RvdHMnIHwgJ2N1c3RvbScgfCAnbm9uZScsXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBncmlkIHNpemUuIFJlY29tbWVuZGVkIHRvIGFsaWduIHRoaXMgc2l6ZSB3LyBkcmFnIGdyaWQgc2V0dGluZ3MgaWYgYXBwbGljYWJsZS5cclxuICAgICAqIElnbm9yZWQgaWYgdHlwZSBpcyBzZXQgdG8gYGN1c3RvbWAgb3IgYG5vbmVgLlxyXG4gICAgICovXHJcbiAgICBzaXplPzogbnVtYmVyLFxyXG4gICAgLyoqXHJcbiAgICAgKiBJZiB0eXBlIGlzIHNldCB0byBgY3VzdG9tYCwgcHJvdmlkZSB5b3VyIGN1c3RvbSBIVE1MLiBJZ25vcmVkIGlmIGJhY2tncm91bmRcclxuICAgICAqIHR5cGUgaXMgbm90IHNldCB0byBgY3VzdG9tYC5cclxuICAgICAqL1xyXG4gICAgaHRtbD86IHN0cmluZyBcclxuICAgIC8qKlxyXG4gICAgICogSWYgdHlwZSBpcyBzZXQgdG8gYGRvdHNgLCB0aGlzIHZhbHVlIGRlZmluZXMgdGhlIHNpemUgb2YgdGhlIGRvdHMuXHJcbiAgICAgKi9cclxuICAgIHJhZGl1cz86IG51bWJlclxyXG59XHJcblxyXG5pbnRlcmZhY2UgQ29udHJvbE9wdGlvbnMge1xyXG4gICAgcGFuQnV0dG9uPzogMCB8IDEgfCAyLFxyXG4gICAgcGFuTW9kaWZpZXI/OiBzdHJpbmcgfCBmYWxzZSxcclxuICAgIHBhbk9uV2hlZWw/OiBib29sZWFuLFxyXG4gICAgcGFuT25BcnJvd0tleXM/OiBib29sZWFuLFxyXG4gICAgem9vbU9uV2hlZWxNb2RpZmllcj86IHN0cmluZyB8IGZhbHNlLFxyXG4gICAgem9vbU9uV2hlZWw/OiBib29sZWFuLFxyXG4gICAgem9vbU9uUGluY2g/OiBib29sZWFuLFxyXG4gICAgem9vbU9uRG91YmxlQ2xpY2s/OiBib29sZWFuLFxyXG4gICAgc2VsZWN0QnV0dG9uPzogMCB8IDEgfCAyLFxyXG4gICAgbXVsdGlTZWxlY3RNb2RpZmllcj86IHN0cmluZyB8IGZhbHNlLFxyXG4gICAgbGFzc29Nb2RpZmllcj86IHN0cmluZyB8IGZhbHNlXHJcbiAgICBsYXNzb0J1dHRvbj86IDAgfCAxIHwgMlxyXG59XHJcblxyXG4vKipcclxuICogTWFpbiBvcHRpb25zXHJcbiAqL1xyXG50eXBlIENvbmZpZyA9IE5vT3B0aW9uYWxzPE9wdGlvbnM+ICYge1xyXG4gICAgZHJhZz86IE5vT3B0aW9uYWxzPERyYWdPcHRpb25zPixcclxuICAgIHNlbGVjdD86IE5vT3B0aW9uYWxzPFNlbGVjdE9wdGlvbnM+LFxyXG4gICAgdW5kbz86IE5vT3B0aW9uYWxzPFVuZG9PcHRpb25zPixcclxuICAgIHBhbnpvb20/OiBOb09wdGlvbmFsczxQYW5ab29tT3B0aW9ucz4sXHJcbiAgICBsYXNzbz86IE5vT3B0aW9uYWxzPExhc3NvT3B0aW9ucz4sXHJcbiAgICBjb250cm9scz86IE5vT3B0aW9uYWxzPENvbnRyb2xPcHRpb25zPlxyXG59XHJcblxyXG5cclxuaW50ZXJmYWNlIE9wdGlvbnMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBncmFwaCBpcyBuZXN0ZWQsIHRoZSBkaXJlY3QgcGFyZW50IG9mIHRoaXMgZ3JhcGguIFRoaXMgaXMgbmVjZXNzYXJ5IGZvciBuZXN0ZWQgZ3JhcGhzXHJcbiAgICAgKiB0byByZWNvbmNpbGUgc2NhbGUuXHJcbiAgICAgKi9cclxuICAgIHBhcmVudD86IE1YRmxvd0NvbnRyb2xsZXJJbnN0YW5jZSxcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIGdyYXBoLlxyXG4gICAgICovXHJcbiAgICB3aWR0aD86IG51bWJlcixcclxuICAgIGhlaWdodD86IG51bWJlcixcclxuXHJcbiAgICBtb2RlbD86IE1vZGVsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHRvIHNob3cgdGhlIGJhY2tncm91bmQgZ3JpZCBvciBub3QuIERlZmF1bHQgaXMgYHRydWVgLlxyXG4gICAgICovXHJcbiAgICBzaG93R3JpZD86IGJvb2xlYW4sXHJcbiAgICAvKipcclxuICAgICAqIElmIGJhY2tncm91bmQgZ3JpZCBpcyB2aXNpYmxlLCB0aGUgc2l6ZSBvZiBlYWNoICh0aW5pZXN0KSBzcXVhcmUuIERlZmF1bHQgaXMgYDMyYC5cclxuICAgICAqL1xyXG4gICAgZ3JpZFNpemU/OiBudW1iZXIsXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdGFydCB6LWluZGV4IGZvciBhbGwgZmxvdyBpdGVtcyBhbmQgZWxlbWVudHMuXHJcbiAgICAgKi9cclxuICAgIHpJbmRleFN0YXJ0PzogbnVtYmVyLCAvL0Jhc2Ugei1pbmRleFxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBIVE1MIHN0cmluZyB0ZW1wbGF0ZSBkZWZpbmluZyB0aGUgYmFzaWMgbGF5b3V0IGZvciBlYWNoIG5vZGUuIFxyXG4gICAgICogVGhpcyBpcyBmb3IgdGhlIGxheW91dCBvciBcInNoZWxsXCIgb25seS4gTm8gZGVjb3JhdGlvbiBzaG91bGQgYmUgaW5jbHVkZWQgaGVyZS5cclxuICAgICAqL1xyXG4gICAgbm9kZUhUTUxUZW1wbGF0ZT86IHN0cmluZyxcclxuICAgIC8qKlxyXG4gICAgICogQ3VydmUgd2VpZ2h0aW5nIGZvciBlZGdlIGxpbmtlcnMuIERlZmF1bHQgaXQgYDAuNjc1YC5cclxuICAgICAqL1xyXG4gICAgYmV6aWVyV2VpZ2h0PzogbnVtYmVyLFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZ3JhcGggYmFja2dyb3VuZCBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGJhY2tncm91bmQ/OiBCYWNrZ3JvdW5kT3B0aW9uc1xyXG4gICAgLyoqXHJcbiAgICAgKiBPcHRpb25zIGZvciB0aGUgJ2RyYWcnIHRvb2wuXHJcbiAgICAgKi9cclxuICAgIGRyYWc/OiBEcmFnT3B0aW9ucyxcclxuICAgIC8qKlxyXG4gICAgICogT3B0aW9ucyBmb3IgXCJzZWxlY3RcIiB0b29sLlxyXG4gICAgICovXHJcbiAgICBzZWxlY3Q/OiBTZWxlY3RPcHRpb25zLFxyXG4gICAgLyoqXHJcbiAgICAgKiBPcHRpb25zIGZvciBkby91bmRvIGNhcGFiaWxpdGVzIFxyXG4gICAgICovXHJcbiAgICB1bmRvPzogVW5kb09wdGlvbnMsXHJcbiAgICAvKipcclxuICAgICAqIE9wdGlvbnMgZm9yIHRoZSBcInBhbnpvb21cIiB0b29sLlxyXG4gICAgICovXHJcbiAgICBwYW56b29tPzogUGFuWm9vbU9wdGlvbnMsXHJcbiAgICAvKipcclxuICAgICAqIE9wdGlvbnMgZm9yIHRoZSBcImxhc3NvXCIgdG9vbC5cclxuICAgICAqL1xyXG4gICAgbGFzc28/OiBMYXNzb09wdGlvbnMsXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICovXHJcbiAgICBjb250cm9scz86IENvbnRyb2xPcHRpb25zLFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcmVuZGVyIG1ldGhvZC4gV2hlbiB1c2luZyBWYW5pbGxhSlMsIHRoaXMgaXMgdGhlIG1ldGhvZCBmcm9tIHdoaWNoIHRoZVxyXG4gICAgICogdXNlciBjYW4gaW5zZXJ0IHRoZWlyIEhUTUwgY29udGVudCBpbnRvIGVhY2ggbm9kZSBhbmQgZWRnZS4gVGhlIHVzZXIgbXVzdCBrZWVwXHJcbiAgICAgKiB0cmFjayBvZiBIVE1MIGNvbnRlbnQgZXh0ZXJuYWxseSBhcyBtYW55IG9wZXJhdGlvbnMgd2lsbCBkZXN0cm95IGFuIGl0ZW1zJ3MgXHJcbiAgICAgKiBjb250ZW50IHNlY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIHJlbmRlcj86IChpdGVtOiBSZW5kZXJhYmxlSXRlbSwgY29udGVudDogRWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWQsIGRhdGE6IHsgW2tleTpzdHJpbmddOiBhbnkgfSkgPT4gRWxlbWVudCB8IHN0cmluZyB8IHZvaWQsXHJcbiAgICAvKipcclxuICAgICAqIFRoZSByZW5kZXIgbWV0aG9kIGZvciB0aGUgY29udGV4dCBtZW51LiBcclxuICAgICAqL1xyXG4gICAgcmVuZGVyQ29udGV4dD86IChpdGVtOiBGbG93SXRlbSwgZ3JhcGhYOiBudW1iZXIsIGdyYXBoWTogbnVtYmVyKSA9PiBFbGVtZW50IHwgc3RyaW5nIHwgdm9pZCxcclxuICAgIC8qKlxyXG4gICAgICogQ3VzdG9tIGxpbmsgdmFsaWRhdG9yLiBUaGlzIHZhbGlkYXRvciB3aWxsIGJlIGNhbGxlZCByZXBlYXRlZGx5IHdoZW4gYSBcImxpbmtpbmdcIlxyXG4gICAgICogb3BlcmF0aW9uIGlzIG9jY3VycmluZyBhbmQgdGhlbiBvbmNlIGJlZm9yZSBhIGZpbmFsIGxpbmsgaXMgZm9ybWVkLiBEb24ndCBwZXJmb3JtIGFueVxyXG4gICAgICogaGVhdnkgcHJvY2Vzc2luZyBpbiB0aGlzIG1ldGhvZC5cclxuICAgICAqL1xyXG4gICAgbGlua1ZhbGlkYXRvcj86IChzdGFydEVkZ2U6IEVkZ2UsIGVuZEVkZ2U6IEVkZ2UpID0+IGJvb2xlYW4sXHJcbiAgICAvKipcclxuICAgICAqIENhbGxiYWNrIHdoZW4gYSBcImRvd25cIiBldmVudCBvY2N1cnMgb24gYW4gZWRnZSBhbmQgYSBcImxpbmtpbmdcIiBvcGVyYXRpb24gYmVnaW5zLiBcclxuICAgICAqIFJldHVybiB0cnVlIHRvIGNvbnRpbnVlIG9yIGZhbHNlIHRvIGNhbmNlbC5cclxuICAgICAqL1xyXG4gICAgYmVmb3JlTGlua1N0YXJ0PzogKHN0YXJ0RWRnZTogRWRnZSkgPT4gYm9vbGVhbixcclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGJhY2sgd2hlbiBhbiBcInVwXCIgZXZlbnQgb2NjdXJzIG9uIGEgdmFsaWQgZWRnZSBhbmQgdGhlIFwibGlua2luZ1wiIG9wZXJhdGlvbiBlbmQuIFxyXG4gICAgICogUmV0dXJuIHRydWUgdG8gY29udGludWUgb3IgZmFsc2UgdG8gY2FuY2VsLlxyXG4gICAgICovXHJcbiAgICBiZWZvcmVMaW5rRW5kPzogKHN0YXJ0RWRnZTogRWRnZSwgZW5kRWRnZTogRWRnZSkgPT4gYm9vbGVhbixcclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIGJlZm9yZSBhIGxpbmsgaXMgcmVtb3ZlZC4gUmV0dXJuIHRydWUgdG8gY29udGludWUgb3IgZmFsc2UgdG8gY2FuY2VsLlxyXG4gICAgICovXHJcbiAgICBiZWZvcmVMaW5rUmVtb3ZlZD86IChsaW5rOiBMaW5rKSA9PiBib29sZWFuLFxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgYmVmb3JlIGEgbm9kZSBpcyByZW1vdmVkLiBSZXR1cm4gdHJ1ZSB0byBjb250aW51ZSBvciBmYWxzZSB0byBjYW5jZWwuXHJcbiAgICAgKi9cclxuICAgIGJlZm9yZU5vZGVSZW1vdmVkPzogKG5vZGU6IE5vZGUpID0+IGJvb2xlYW4sXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCBiZWZvcmUgYW4gZWRnZSBpcyByZW1vdmVkLiBSZXR1cm4gdHJ1ZSB0byBjb250aW51ZSBvciBmYWxzZSB0byBjYW5jZWwuXHJcbiAgICAgKi9cclxuICAgIGJlZm9yZUVkZ2VSZW1vdmVkPzogKGVkZ2U6IEVkZ2UpID0+IGJvb2xlYW4sXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIHJldHVybiB2YWx1ZSBmb3IgaW50ZXJuYWwgc3lzdGVtIFwicGx1Z2luXCJcclxuICovXHJcbmludGVyZmFjZSBBY3Rpb25IYW5kbGVyIHtcclxuICAgIG5hbWU6IHN0cmluZyxcclxuICAgIC8vIG9uRG93bj86IChlOiBQb2ludGVyRXZlbnQsIGl0ZW0/OiBGbG93SXRlbSkgPT4gdm9pZCxcclxuICAgIC8vIG9uVXA/OiAoZTogUG9pbnRlckV2ZW50LCBpdGVtPzogRmxvd0l0ZW0pID0+IHZvaWQsXHJcbiAgICAvLyBvbk1vdmU/OiAoZTogUG9pbnRlckV2ZW50KSA9PiB2b2lkLFxyXG4gICAgLy8gb25LZXlVcD86IChlOiBLZXlib2FyZEV2ZW50KSA9PiB2b2lkLFxyXG4gICAgLy8gb25LZXlEb3duPzogKGU6IEtleWJvYXJkRXZlbnQpID0+IHZvaWQsXHJcbiAgICAvLyBvbkNvbnRleHRNZW51PzogKGU6IE1vdXNlRXZlbnQsIGl0ZW0/OiBGbG93SXRlbSkgPT4gdm9pZCxcclxuICAgIHVwZGF0ZT86IChhcGk6IEFwaSkgPT4gdm9pZCxcclxuICAgIGNhbmNlbD86ICgpID0+IHZvaWQsXHJcbiAgICBkaXNwb3NlPzogKCkgPT4gdm9pZFxyXG59XHJcblxyXG4vKipcclxuICogSW50ZXJuYWwgZ3JhcGggQVBJIHBhc3NlZCB0byBzdWJzeXN0ZW1zLCBldGMuXHJcbiAqL1xyXG50eXBlIE1ldGhvZHMgPSBSZXR1cm5UeXBlPHR5cGVvZiBnZXRQdWJsaWNJbnRlcmZhY2U+O1xyXG5pbnRlcmZhY2UgQXBpIHtcclxuICAgIG9wdHM6IENvbmZpZyxcclxuICAgIGRvbTogRmxvd0RvbSxcclxuICAgIHN0YXRlOiBGbG93U3RhdGUsXHJcbiAgICB0b29sczogTWFwPHN0cmluZywgQWN0aW9uSGFuZGxlcj4sXHJcbiAgICByZW5kZXJDYWNoZTogTWFwPHN0cmluZywgRWxlbWVudCB8IG51bGw+LFxyXG4gICAgZW1pdDogPEsgZXh0ZW5kcyBrZXlvZiBGbG93RXZlbnRNYXA+KHR5cGU6IEssIGV2ZW50PzogRmxvd0V2ZW50TWFwW0tdKSA9PiB2b2lkLFxyXG4gICAgbG9jazogKHRvb2xOYW1lOiBzdHJpbmcpID0+IHZvaWQsXHJcbiAgICB1bmxvY2s6ICgpID0+IHZvaWQsXHJcbiAgICBpc0xvY2tlZDogKGV4Y2VwdFRvb2w/OiBzdHJpbmcpID0+IGJvb2xlYW5cclxufVxyXG5cclxuLyoqXHJcbiAqIEV2ZW50cyBlbW1pdHRlZCBhbmQgdGhlaXIgcGFyYW1ldGVyc1xyXG4gKi9cclxuaW50ZXJmYWNlIEZsb3dFdmVudE1hcCB7XHJcbiAgICAndHJhbnNmb3JtJzogVHJhbnNmb3JtLFxyXG4gICAgJ3ByZXNlbGVjdGVkJzogTWFwPHN0cmluZywgU2VsZWN0YWJsZUl0ZW0+LFxyXG4gICAgJ3NlbGVjdGVkJzogTWFwPHN0cmluZywgU2VsZWN0YWJsZUl0ZW0+LFxyXG4gICAgJ25vZGVBZGRlZCc6IE5vZGUsXHJcbiAgICAnbm9kZVJlbW92ZWQnOiBOb2RlLFxyXG4gICAgJ2xpbmtBZGRlZCc6IExpbmssXHJcbiAgICAnbGlua1JlbW92ZWQnOiBMaW5rLFxyXG4gICAgJ2RyYWdTdGFydCc6IE5vZGVbXSxcclxuICAgICdkcmFnRW5kJzogTm9kZVtdLFxyXG4gICAgJ2NvbnRleHRPcGVuZWQnOiBDb250ZXh0VGFyZ2V0SXRlbSxcclxuICAgICdjb250ZXh0Q2xvc2VkJzogQ29udGV4dFRhcmdldEl0ZW0sXHJcbiAgICAnZWRnZUFkZGVkJzogRWRnZSxcclxuICAgICdlZGdlUmVtb3ZlZCc6IEVkZ2UsXHJcbiAgICAnY2xlYXJlZCc6IHZvaWQsXHJcbiAgICAvLyAnbW9kZWxDaGFuZ2UnOiBNb2RlbCxcclxuICAgIC8vJ2JhdGNoOm5vZGVBZGRlZCc6IE1vZGVsLFxyXG59XHJcblxyXG4vKipcclxuICogRXh0ZW5kZWQgcGFyYW1ldGVycyBhdmFpbGFibGUgZm9yIG1vc3QgYWN0aW9ucyAoYGFkZE5vZGVgLCBgZGVsZXRlTm9kZWApIGV0Yy5cclxuICovXHJcbmludGVyZmFjZSBBY3Rpb25FeHRlbmRlZE9wdHMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdXBwcmVzcyBhbnkgZXZlbnRzIG5vcm1hbGx5IHRyaWdnZXJlZCBieSB0aGlzIGFjdGlvblxyXG4gICAgICovXHJcbiAgICBzdXBwcmVzc0V2ZW50PzogYm9vbGVhbixcclxuICAgIC8qKlxyXG4gICAgICogU3VwcHJlc3MgYW55IGFjdGlvbiBwZXJzaXN0ZW5jZSBub3JtYWxseSB0cmlnZ2VyZWQgYnkgdGhpcyBhY3Rpb24uXHJcbiAgICAgKiBVc2VmdWwgd2hlbiBiYXRjaGluZyBhY3Rpb25zIGludG8gYSBzaW5nbGUgb3BlcmF0aW9uLlxyXG4gICAgICovXHJcbiAgICBpZ25vcmVBY3Rpb24/OiBib29sZWFuXHJcbn1cclxuXHJcblxyXG50eXBlIFNldFZpZXdPcHRpb25zID0ge1xyXG4gICAgeD86IG51bWJlcixcclxuICAgIHk/OiBudW1iZXIsXHJcbiAgICBzY2FsZT86IG51bWJlcixcclxuICAgIHNjYWxlU3RlcHM/OiBudW1iZXIsXHJcbiAgICB0cmFuc2l0aW9uPzogYm9vbGVhbiB8IG51bWJlclxyXG59ICYgQWN0aW9uRXh0ZW5kZWRPcHRzO1xyXG5cclxudHlwZSBJbnRlcmFjdGlvbkV2ZW50ID0ge1xyXG4gICAgdHlwZToga2V5b2YgSW50ZXJhY3Rpb25FdmVudE1hcCxcclxuICAgIGl0ZW06IEZsb3dJdGVtIHwgdW5kZWZpbmVkLFxyXG4gICAgZ3JhcGhYOiBudW1iZXIsXHJcbiAgICBncmFwaFk6IG51bWJlcixcclxuICAgIGNvbnRhaW5lclg6IG51bWJlcixcclxuICAgIGNvbnRhaW5lclk6IG51bWJlcixcclxuICAgIHBhZ2VYOiBudW1iZXIsXHJcbiAgICBwYWdlWTogbnVtYmVyLFxyXG4gICAgZXZlbnQ6IEV2ZW50XHJcbn1cclxuXHJcbmludGVyZmFjZSBJbnRlcmFjdGlvbkV2ZW50TWFwIHtcclxuICAgICdjb250ZXh0bWVudSc6IEludGVyYWN0aW9uRXZlbnQsXHJcbiAgICAnZG93bic6IEludGVyYWN0aW9uRXZlbnQsXHJcbiAgICAndXAnOiBJbnRlcmFjdGlvbkV2ZW50LFxyXG4gICAgJ21vdmUnOiBJbnRlcmFjdGlvbkV2ZW50LFxyXG4gICAgJ2tleWRvd24nOiBJbnRlcmFjdGlvbkV2ZW50LFxyXG4gICAgJ2tleXVwJzogSW50ZXJhY3Rpb25FdmVudCxcclxuICAgICd3aGVlbCc6IEludGVyYWN0aW9uRXZlbnRcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIEFjdGlvbixcclxuICAgIEFjdGlvbkV4dGVuZGVkT3B0cyxcclxuICAgIEFjdGlvbkhhbmRsZXIsXHJcbiAgICBBY3Rpb25UeXBlLFxyXG4gICAgQWN0aW9uVHlwZXMsXHJcbiAgICBBZGROb2RlT3B0aW9ucyxcclxuICAgIEFkZEVkZ2VPcHRpb25zLFxyXG4gICAgQWRkTGlua09wdGlvbnMsXHJcbiAgICBNZXRob2RzLFxyXG4gICAgQXBpLFxyXG4gICAgQ29udGVudE1vZGVsSXRlbSxcclxuICAgIENyZWF0ZUxpbmtQYXJhbXMsXHJcbiAgICBFZGdlLFxyXG4gICAgRWRnZUdyb3VwLFxyXG4gICAgRWRnZU1vZGVsLFxyXG4gICAgRmxvd0RvbSxcclxuICAgIEZsb3dFdmVudE1hcCxcclxuICAgIEZsb3dJbnRlcm5hbEFwaSxcclxuICAgIEZsb3dJdGVtLFxyXG4gICAgRmxvd0F0dHIsXHJcbiAgICBGbG93Q2xhc3MsXHJcbiAgICBGbG93SXRlbVR5cGUsXHJcbiAgICBGbG93U3RhdGUsXHJcbiAgICBHaG9zdExpbmssXHJcbiAgICBHcmFwaCxcclxuICAgIExpbmssXHJcbiAgICBMaW5rTW9kZWwsXHJcbiAgICBMaW5rTGF0Y2hQb3NpdGlvbixcclxuICAgIExpbmtTdGF0ZSxcclxuICAgIE1vZGVsLFxyXG4gICAgTm9kZSxcclxuICAgIE5vZGVNb2RlbCxcclxuICAgIE9wdGlvbnMsXHJcbiAgICBDb25maWcsXHJcbiAgICBQYW5ab29tT3B0aW9ucyxcclxuICAgIFJlY3QsXHJcbiAgICBSZW5kZXJhYmxlVHlwZSxcclxuICAgIFNlbGVjdGFibGVJdGVtLFxyXG4gICAgU2VsZWN0T3B0aW9ucyxcclxuICAgIFRyYW5zZm9ybSxcclxuICAgIFRyYW5zZm9ybU1vZGVsLFxyXG4gICAgUmVuZGVyYWJsZUl0ZW0sXHJcbiAgICBJbnRlcmFjdGlvbkV2ZW50LFxyXG4gICAgSW50ZXJhY3Rpb25FdmVudE1hcCxcclxuICAgIFNlcmlhbGl6YWJsZSxcclxuICAgIFNldFZpZXdPcHRpb25zLFxyXG4gICAgTm9PcHRpb25hbHMsXHJcbiAgICBDb250cm9sT3B0aW9ucyxcclxuICAgIERyYWdPcHRpb25zXHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/types/flow.types.v2.ts\n");

/***/ }),

/***/ "./src/util/event-emitter.ts":
/*!***********************************!*\
  !*** ./src/util/event-emitter.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EventEmitter\": () => (/* binding */ EventEmitter)\n/* harmony export */ });\nclass EventEmitter {\n  constructor() {\n    this.events = {};\n  }\n\n  on(event, listener) {\n    if (typeof this.events[event] !== \"object\") {\n      this.events[event] = [];\n    }\n\n    this.events[event].push(listener);\n    return () => this.removeListener(event, listener);\n  }\n\n  removeListener(event, listener) {\n    if (typeof this.events[event] !== \"object\") {\n      return;\n    }\n\n    const idx = this.events[event].indexOf(listener);\n\n    if (idx > -1) {\n      this.events[event].splice(idx, 1);\n    }\n  }\n\n  removeAllListeners() {\n    Object.keys(this.events).forEach(event => this.events[event].splice(0, this.events[event].length));\n  }\n\n  emit(event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (typeof this.events[event] !== \"object\") {\n      return;\n    }\n\n    [...this.events[event]].forEach(listener => listener.apply(this, args));\n  }\n\n  once(event, listener) {\n    var _this = this;\n\n    const remove = this.on(event, function () {\n      remove();\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      listener.apply(_this, args);\n    });\n    return remove;\n  }\n\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbC9ldmVudC1lbWl0dGVyLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFHQSxNQUFNLFlBQU4sQ0FBa0I7QUFBbEI7QUFDcUIsa0JBQWtCLEVBQWxCO0FBNENwQjs7QUExQ1UsSUFBRSxDQUFDLEtBQUQsRUFBZ0IsUUFBaEIsRUFBa0M7QUFDdkMsUUFBSSxPQUFPLEtBQUssTUFBTCxDQUFZLEtBQVosQ0FBUCxLQUE4QixRQUFsQyxFQUE0QztBQUN4QyxXQUFLLE1BQUwsQ0FBWSxLQUFaLElBQXFCLEVBQXJCO0FBQ0g7O0FBRUQsU0FBSyxNQUFMLENBQVksS0FBWixFQUFtQixJQUFuQixDQUF3QixRQUF4QjtBQUNBLFdBQU8sTUFBTSxLQUFLLGNBQUwsQ0FBb0IsS0FBcEIsRUFBMkIsUUFBM0IsQ0FBYjtBQUNIOztBQUVNLGdCQUFjLENBQUMsS0FBRCxFQUFnQixRQUFoQixFQUFrQztBQUNuRCxRQUFJLE9BQU8sS0FBSyxNQUFMLENBQVksS0FBWixDQUFQLEtBQThCLFFBQWxDLEVBQTRDO0FBQ3hDO0FBQ0g7O0FBRUQsVUFBTSxHQUFHLEdBQVcsS0FBSyxNQUFMLENBQVksS0FBWixFQUFtQixPQUFuQixDQUEyQixRQUEzQixDQUFwQjs7QUFDQSxRQUFJLEdBQUcsR0FBRyxDQUFDLENBQVgsRUFBYztBQUNWLFdBQUssTUFBTCxDQUFZLEtBQVosRUFBbUIsTUFBbkIsQ0FBMEIsR0FBMUIsRUFBK0IsQ0FBL0I7QUFDSDtBQUNKOztBQUVNLG9CQUFrQjtBQUNyQixVQUFNLENBQUMsSUFBUCxDQUFZLEtBQUssTUFBakIsRUFBeUIsT0FBekIsQ0FBa0MsS0FBRCxJQUM3QixLQUFLLE1BQUwsQ0FBWSxLQUFaLEVBQW1CLE1BQW5CLENBQTBCLENBQTFCLEVBQTZCLEtBQUssTUFBTCxDQUFZLEtBQVosRUFBbUIsTUFBaEQsQ0FESjtBQUdIOztBQUVNLE1BQUksQ0FBQyxLQUFELEVBQThCO0FBQUEsc0NBQVgsSUFBVztBQUFYLFVBQVc7QUFBQTs7QUFDckMsUUFBSSxPQUFPLEtBQUssTUFBTCxDQUFZLEtBQVosQ0FBUCxLQUE4QixRQUFsQyxFQUE0QztBQUN4QztBQUNIOztBQUVELEtBQUMsR0FBRyxLQUFLLE1BQUwsQ0FBWSxLQUFaLENBQUosRUFBd0IsT0FBeEIsQ0FBaUMsUUFBRCxJQUFjLFFBQVEsQ0FBQyxLQUFULENBQWUsSUFBZixFQUFxQixJQUFyQixDQUE5QztBQUNIOztBQUVNLE1BQUksQ0FBQyxLQUFELEVBQWdCLFFBQWhCLEVBQWtDO0FBQUE7O0FBQ3pDLFVBQU0sTUFBTSxHQUFpQixLQUFLLEVBQUwsQ0FBUSxLQUFSLEVBQWUsWUFBbUI7QUFDM0QsWUFBTTs7QUFEcUQseUNBQWYsSUFBZTtBQUFmLFlBQWU7QUFBQTs7QUFFM0QsY0FBUSxDQUFDLEtBQVQsQ0FBZSxLQUFmLEVBQXFCLElBQXJCO0FBQ0gsS0FINEIsQ0FBN0I7QUFLQSxXQUFPLE1BQVA7QUFDSDs7QUE1Q2EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teGZsb3cvLi9zcmMvdXRpbC9ldmVudC1lbWl0dGVyLnRzP2EzM2IiXSwic291cmNlc0NvbnRlbnQiOlsidHlwZSBMaXN0ZW5lciA9ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcclxuaW50ZXJmYWNlIElFdmVudHMgeyBbZXZlbnQ6IHN0cmluZ106IExpc3RlbmVyW107IH1cclxuXHJcbmNsYXNzIEV2ZW50RW1pdHRlciB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV2ZW50czogSUV2ZW50cyA9IHt9O1xyXG5cclxuICAgIHB1YmxpYyBvbihldmVudDogc3RyaW5nLCBsaXN0ZW5lcjogTGlzdGVuZXIpOiAoKSA9PiB2b2lkIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZXZlbnRzW2V2ZW50XSAhPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0gPSBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50XS5wdXNoKGxpc3RlbmVyKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4gdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBsaXN0ZW5lcjogTGlzdGVuZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZXZlbnRzW2V2ZW50XSAhPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpZHg6IG51bWJlciA9IHRoaXMuZXZlbnRzW2V2ZW50XS5pbmRleE9mKGxpc3RlbmVyKTtcclxuICAgICAgICBpZiAoaWR4ID4gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlQWxsTGlzdGVuZXJzKCk6IHZvaWQge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuZXZlbnRzKS5mb3JFYWNoKChldmVudDogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0uc3BsaWNlKDAsIHRoaXMuZXZlbnRzW2V2ZW50XS5sZW5ndGgpLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVtaXQoZXZlbnQ6IHN0cmluZywgLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZXZlbnRzW2V2ZW50XSAhPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBbLi4udGhpcy5ldmVudHNbZXZlbnRdXS5mb3JFYWNoKChsaXN0ZW5lcikgPT4gbGlzdGVuZXIuYXBwbHkodGhpcywgYXJncykpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvbmNlKGV2ZW50OiBzdHJpbmcsIGxpc3RlbmVyOiBMaXN0ZW5lcik6ICgpID0+IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHJlbW92ZTogKCgpID0+IHZvaWQpID0gdGhpcy5vbihldmVudCwgKC4uLmFyZ3M6IGFueVtdKSA9PiB7XHJcbiAgICAgICAgICAgIHJlbW92ZSgpO1xyXG4gICAgICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlbW92ZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHsgRXZlbnRFbWl0dGVyLCBMaXN0ZW5lciB9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/util/event-emitter.ts\n");

/***/ }),

/***/ "./src/styles/default.css":
/*!********************************!*\
  !*** ./src/styles/default.css ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"themes/default.css\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3R5bGVzL2RlZmF1bHQuY3NzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxxQkFBdUIsdUJBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXhmbG93Ly4vc3JjL3N0eWxlcy9kZWZhdWx0LmNzcz9lMzQ4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJ0aGVtZXMvZGVmYXVsdC5jc3NcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/styles/default.css\n");

/***/ }),

/***/ "./node_modules/hotkeys-js/dist/hotkeys.esm.js":
/*!*****************************************************!*\
  !*** ./node_modules/hotkeys-js/dist/hotkeys.esm.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*!\n * hotkeys-js v3.8.7\n * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies.\n * \n * Copyright (c) 2021 kenny wong <wowohoo@qq.com>\n * http://jaywcjlove.github.io/hotkeys\n * \n * Licensed under the MIT license.\n */\n\nvar isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false; // 绑定事件\n\nfunction addEvent(object, event, method) {\n  if (object.addEventListener) {\n    object.addEventListener(event, method, false);\n  } else if (object.attachEvent) {\n    object.attachEvent(\"on\".concat(event), function () {\n      method(window.event);\n    });\n  }\n} // 修饰键转换成对应的键码\n\n\nfunction getMods(modifier, key) {\n  var mods = key.slice(0, key.length - 1);\n\n  for (var i = 0; i < mods.length; i++) {\n    mods[i] = modifier[mods[i].toLowerCase()];\n  }\n\n  return mods;\n} // 处理传的key字符串转换成数组\n\n\nfunction getKeys(key) {\n  if (typeof key !== 'string') key = '';\n  key = key.replace(/\\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等\n\n  var keys = key.split(','); // 同时设置多个快捷键，以','分割\n\n  var index = keys.lastIndexOf(''); // 快捷键可能包含','，需特殊处理\n\n  for (; index >= 0;) {\n    keys[index - 1] += ',';\n    keys.splice(index, 1);\n    index = keys.lastIndexOf('');\n  }\n\n  return keys;\n} // 比较修饰键的数组\n\n\nfunction compareArray(a1, a2) {\n  var arr1 = a1.length >= a2.length ? a1 : a2;\n  var arr2 = a1.length >= a2.length ? a2 : a1;\n  var isIndex = true;\n\n  for (var i = 0; i < arr1.length; i++) {\n    if (arr2.indexOf(arr1[i]) === -1) isIndex = false;\n  }\n\n  return isIndex;\n}\n\nvar _keyMap = {\n  backspace: 8,\n  tab: 9,\n  clear: 12,\n  enter: 13,\n  return: 13,\n  esc: 27,\n  escape: 27,\n  space: 32,\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40,\n  del: 46,\n  delete: 46,\n  ins: 45,\n  insert: 45,\n  home: 36,\n  end: 35,\n  pageup: 33,\n  pagedown: 34,\n  capslock: 20,\n  num_0: 96,\n  num_1: 97,\n  num_2: 98,\n  num_3: 99,\n  num_4: 100,\n  num_5: 101,\n  num_6: 102,\n  num_7: 103,\n  num_8: 104,\n  num_9: 105,\n  num_multiply: 106,\n  num_add: 107,\n  num_enter: 108,\n  num_subtract: 109,\n  num_decimal: 110,\n  num_divide: 111,\n  '⇪': 20,\n  ',': 188,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '-': isff ? 173 : 189,\n  '=': isff ? 61 : 187,\n  ';': isff ? 59 : 186,\n  '\\'': 222,\n  '[': 219,\n  ']': 221,\n  '\\\\': 220\n}; // Modifier Keys\n\nvar _modifier = {\n  // shiftKey\n  '⇧': 16,\n  shift: 16,\n  // altKey\n  '⌥': 18,\n  alt: 18,\n  option: 18,\n  // ctrlKey\n  '⌃': 17,\n  ctrl: 17,\n  control: 17,\n  // metaKey\n  '⌘': 91,\n  cmd: 91,\n  command: 91\n};\nvar modifierMap = {\n  16: 'shiftKey',\n  18: 'altKey',\n  17: 'ctrlKey',\n  91: 'metaKey',\n  shiftKey: 16,\n  ctrlKey: 17,\n  altKey: 18,\n  metaKey: 91\n};\nvar _mods = {\n  16: false,\n  18: false,\n  17: false,\n  91: false\n};\nvar _handlers = {}; // F1~F12 special key\n\nfor (var k = 1; k < 20; k++) {\n  _keyMap[\"f\".concat(k)] = 111 + k;\n}\n\nvar _downKeys = []; // 记录摁下的绑定键\n\nvar _scope = 'all'; // 默认热键范围\n\nvar elementHasBindEvent = []; // 已绑定事件的节点记录\n// 返回键码\n\nvar code = function code(x) {\n  return _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);\n}; // 设置获取当前范围（默认为'所有'）\n\n\nfunction setScope(scope) {\n  _scope = scope || 'all';\n} // 获取当前范围\n\n\nfunction getScope() {\n  return _scope || 'all';\n} // 获取摁下绑定键的键值\n\n\nfunction getPressedKeyCodes() {\n  return _downKeys.slice(0);\n} // 表单控件控件判断 返回 Boolean\n// hotkey is effective only when filter return true\n\n\nfunction filter(event) {\n  var target = event.target || event.srcElement;\n  var tagName = target.tagName;\n  var flag = true; // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>\n\n  if (target.isContentEditable || (tagName === 'INPUT' || tagName === 'TEXTAREA' || tagName === 'SELECT') && !target.readOnly) {\n    flag = false;\n  }\n\n  return flag;\n} // 判断摁下的键是否为某个键，返回true或者false\n\n\nfunction isPressed(keyCode) {\n  if (typeof keyCode === 'string') {\n    keyCode = code(keyCode); // 转换成键码\n  }\n\n  return _downKeys.indexOf(keyCode) !== -1;\n} // 循环删除handlers中的所有 scope(范围)\n\n\nfunction deleteScope(scope, newScope) {\n  var handlers;\n  var i; // 没有指定scope，获取scope\n\n  if (!scope) scope = getScope();\n\n  for (var key in _handlers) {\n    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {\n      handlers = _handlers[key];\n\n      for (i = 0; i < handlers.length;) {\n        if (handlers[i].scope === scope) handlers.splice(i, 1);else i++;\n      }\n    }\n  } // 如果scope被删除，将scope重置为all\n\n\n  if (getScope() === scope) setScope(newScope || 'all');\n} // 清除修饰键\n\n\nfunction clearModifier(event) {\n  var key = event.keyCode || event.which || event.charCode;\n\n  var i = _downKeys.indexOf(key); // 从列表中清除按压过的键\n\n\n  if (i >= 0) {\n    _downKeys.splice(i, 1);\n  } // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题\n\n\n  if (event.key && event.key.toLowerCase() === 'meta') {\n    _downKeys.splice(0, _downKeys.length);\n  } // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除\n\n\n  if (key === 93 || key === 224) key = 91;\n\n  if (key in _mods) {\n    _mods[key] = false; // 将修饰键重置为false\n\n    for (var k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = false;\n    }\n  }\n}\n\nfunction unbind(keysInfo) {\n  // unbind(), unbind all keys\n  if (!keysInfo) {\n    Object.keys(_handlers).forEach(function (key) {\n      return delete _handlers[key];\n    });\n  } else if (Array.isArray(keysInfo)) {\n    // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])\n    keysInfo.forEach(function (info) {\n      if (info.key) eachUnbind(info);\n    });\n  } else if (typeof keysInfo === 'object') {\n    // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})\n    if (keysInfo.key) eachUnbind(keysInfo);\n  } else if (typeof keysInfo === 'string') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    // support old method\n    // eslint-disable-line\n    var scope = args[0],\n        method = args[1];\n\n    if (typeof scope === 'function') {\n      method = scope;\n      scope = '';\n    }\n\n    eachUnbind({\n      key: keysInfo,\n      scope: scope,\n      method: method,\n      splitKey: '+'\n    });\n  }\n} // 解除绑定某个范围的快捷键\n\n\nvar eachUnbind = function eachUnbind(_ref) {\n  var key = _ref.key,\n      scope = _ref.scope,\n      method = _ref.method,\n      _ref$splitKey = _ref.splitKey,\n      splitKey = _ref$splitKey === void 0 ? '+' : _ref$splitKey;\n  var multipleKeys = getKeys(key);\n  multipleKeys.forEach(function (originKey) {\n    var unbindKeys = originKey.split(splitKey);\n    var len = unbindKeys.length;\n    var lastKey = unbindKeys[len - 1];\n    var keyCode = lastKey === '*' ? '*' : code(lastKey);\n    if (!_handlers[keyCode]) return; // 判断是否传入范围，没有就获取范围\n\n    if (!scope) scope = getScope();\n    var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];\n    _handlers[keyCode] = _handlers[keyCode].map(function (record) {\n      // 通过函数判断，是否解除绑定，函数相等直接返回\n      var isMatchingMethod = method ? record.method === method : true;\n\n      if (isMatchingMethod && record.scope === scope && compareArray(record.mods, mods)) {\n        return {};\n      }\n\n      return record;\n    });\n  });\n}; // 对监听对应快捷键的回调函数进行处理\n\n\nfunction eventHandler(event, handler, scope) {\n  var modifiersMatch; // 看它是否在当前范围\n\n  if (handler.scope === scope || handler.scope === 'all') {\n    // 检查是否匹配修饰符（如果有返回true）\n    modifiersMatch = handler.mods.length > 0;\n\n    for (var y in _mods) {\n      if (Object.prototype.hasOwnProperty.call(_mods, y)) {\n        if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {\n          modifiersMatch = false;\n        }\n      }\n    } // 调用处理程序，如果是修饰键不做处理\n\n\n    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {\n      if (handler.method(event, handler) === false) {\n        if (event.preventDefault) event.preventDefault();else event.returnValue = false;\n        if (event.stopPropagation) event.stopPropagation();\n        if (event.cancelBubble) event.cancelBubble = true;\n      }\n    }\n  }\n} // 处理keydown事件\n\n\nfunction dispatch(event) {\n  var asterisk = _handlers['*'];\n  var key = event.keyCode || event.which || event.charCode; // 表单控件过滤 默认表单控件不触发快捷键\n\n  if (!hotkeys.filter.call(this, event)) return; // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致\n  // Webkit左右 command 键值不一样\n\n  if (key === 93 || key === 224) key = 91;\n  /**\n   * Collect bound keys\n   * If an Input Method Editor is processing key input and the event is keydown, return 229.\n   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229\n   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n   */\n\n  if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);\n  /**\n   * Jest test cases are required.\n   * ===============================\n   */\n\n  ['ctrlKey', 'altKey', 'shiftKey', 'metaKey'].forEach(function (keyName) {\n    var keyNum = modifierMap[keyName];\n\n    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {\n      _downKeys.push(keyNum);\n    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {\n      _downKeys.splice(_downKeys.indexOf(keyNum), 1);\n    } else if (keyName === 'metaKey' && event[keyName] && _downKeys.length === 3) {\n      /**\n       * Fix if Command is pressed:\n       * ===============================\n       */\n      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {\n        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));\n      }\n    }\n  });\n  /**\n   * -------------------------------\n   */\n\n  if (key in _mods) {\n    _mods[key] = true; // 将特殊字符的key注册到 hotkeys 上\n\n    for (var k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = true;\n    }\n\n    if (!asterisk) return;\n  } // 将 modifierMap 里面的修饰键绑定到 event 中\n\n\n  for (var e in _mods) {\n    if (Object.prototype.hasOwnProperty.call(_mods, e)) {\n      _mods[e] = event[modifierMap[e]];\n    }\n  }\n  /**\n   * https://github.com/jaywcjlove/hotkeys/pull/129\n   * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.\n   * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type μ.\n   * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate\n   */\n\n\n  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState('AltGraph')) {\n    if (_downKeys.indexOf(17) === -1) {\n      _downKeys.push(17);\n    }\n\n    if (_downKeys.indexOf(18) === -1) {\n      _downKeys.push(18);\n    }\n\n    _mods[17] = true;\n    _mods[18] = true;\n  } // 获取范围 默认为 `all`\n\n\n  var scope = getScope(); // 对任何快捷键都需要做的处理\n\n  if (asterisk) {\n    for (var i = 0; i < asterisk.length; i++) {\n      if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) {\n        eventHandler(event, asterisk[i], scope);\n      }\n    }\n  } // key 不在 _handlers 中返回\n\n\n  if (!(key in _handlers)) return;\n\n  for (var _i = 0; _i < _handlers[key].length; _i++) {\n    if (event.type === 'keydown' && _handlers[key][_i].keydown || event.type === 'keyup' && _handlers[key][_i].keyup) {\n      if (_handlers[key][_i].key) {\n        var record = _handlers[key][_i];\n        var splitKey = record.splitKey;\n        var keyShortcut = record.key.split(splitKey);\n        var _downKeysCurrent = []; // 记录当前按键键值\n\n        for (var a = 0; a < keyShortcut.length; a++) {\n          _downKeysCurrent.push(code(keyShortcut[a]));\n        }\n\n        if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) {\n          // 找到处理内容\n          eventHandler(event, record, scope);\n        }\n      }\n    }\n  }\n} // 判断 element 是否已经绑定事件\n\n\nfunction isElementBind(element) {\n  return elementHasBindEvent.indexOf(element) > -1;\n}\n\nfunction hotkeys(key, option, method) {\n  _downKeys = [];\n  var keys = getKeys(key); // 需要处理的快捷键列表\n\n  var mods = [];\n  var scope = 'all'; // scope默认为all，所有范围都有效\n\n  var element = document; // 快捷键事件绑定节点\n\n  var i = 0;\n  var keyup = false;\n  var keydown = true;\n  var splitKey = '+'; // 对为设定范围的判断\n\n  if (method === undefined && typeof option === 'function') {\n    method = option;\n  }\n\n  if (Object.prototype.toString.call(option) === '[object Object]') {\n    if (option.scope) scope = option.scope; // eslint-disable-line\n\n    if (option.element) element = option.element; // eslint-disable-line\n\n    if (option.keyup) keyup = option.keyup; // eslint-disable-line\n\n    if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line\n\n    if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line\n  }\n\n  if (typeof option === 'string') scope = option; // 对于每个快捷键进行处理\n\n  for (; i < keys.length; i++) {\n    key = keys[i].split(splitKey); // 按键列表\n\n    mods = []; // 如果是组合快捷键取得组合快捷键\n\n    if (key.length > 1) mods = getMods(_modifier, key); // 将非修饰键转化为键码\n\n    key = key[key.length - 1];\n    key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键\n    // 判断key是否在_handlers中，不在就赋一个空数组\n\n    if (!(key in _handlers)) _handlers[key] = [];\n\n    _handlers[key].push({\n      keyup: keyup,\n      keydown: keydown,\n      scope: scope,\n      mods: mods,\n      shortcut: keys[i],\n      method: method,\n      key: keys[i],\n      splitKey: splitKey\n    });\n  } // 在全局document上设置快捷键\n\n\n  if (typeof element !== 'undefined' && !isElementBind(element) && window) {\n    elementHasBindEvent.push(element);\n    addEvent(element, 'keydown', function (e) {\n      dispatch(e);\n    });\n    addEvent(window, 'focus', function () {\n      _downKeys = [];\n    });\n    addEvent(element, 'keyup', function (e) {\n      dispatch(e);\n      clearModifier(e);\n    });\n  }\n}\n\nvar _api = {\n  setScope: setScope,\n  getScope: getScope,\n  deleteScope: deleteScope,\n  getPressedKeyCodes: getPressedKeyCodes,\n  isPressed: isPressed,\n  filter: filter,\n  unbind: unbind\n};\n\nfor (var a in _api) {\n  if (Object.prototype.hasOwnProperty.call(_api, a)) {\n    hotkeys[a] = _api[a];\n  }\n}\n\nif (typeof window !== 'undefined') {\n  var _hotkeys = window.hotkeys;\n\n  hotkeys.noConflict = function (deep) {\n    if (deep && window.hotkeys === hotkeys) {\n      window.hotkeys = _hotkeys;\n    }\n\n    return hotkeys;\n  };\n\n  window.hotkeys = hotkeys;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hotkeys);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/hotkeys-js/dist/hotkeys.esm.js\n");

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__extends\": () => (/* binding */ __extends),\n/* harmony export */   \"__assign\": () => (/* binding */ __assign),\n/* harmony export */   \"__rest\": () => (/* binding */ __rest),\n/* harmony export */   \"__decorate\": () => (/* binding */ __decorate),\n/* harmony export */   \"__param\": () => (/* binding */ __param),\n/* harmony export */   \"__metadata\": () => (/* binding */ __metadata),\n/* harmony export */   \"__awaiter\": () => (/* binding */ __awaiter),\n/* harmony export */   \"__generator\": () => (/* binding */ __generator),\n/* harmony export */   \"__createBinding\": () => (/* binding */ __createBinding),\n/* harmony export */   \"__exportStar\": () => (/* binding */ __exportStar),\n/* harmony export */   \"__values\": () => (/* binding */ __values),\n/* harmony export */   \"__read\": () => (/* binding */ __read),\n/* harmony export */   \"__spread\": () => (/* binding */ __spread),\n/* harmony export */   \"__spreadArrays\": () => (/* binding */ __spreadArrays),\n/* harmony export */   \"__spreadArray\": () => (/* binding */ __spreadArray),\n/* harmony export */   \"__await\": () => (/* binding */ __await),\n/* harmony export */   \"__asyncGenerator\": () => (/* binding */ __asyncGenerator),\n/* harmony export */   \"__asyncDelegator\": () => (/* binding */ __asyncDelegator),\n/* harmony export */   \"__asyncValues\": () => (/* binding */ __asyncValues),\n/* harmony export */   \"__makeTemplateObject\": () => (/* binding */ __makeTemplateObject),\n/* harmony export */   \"__importStar\": () => (/* binding */ __importStar),\n/* harmony export */   \"__importDefault\": () => (/* binding */ __importDefault),\n/* harmony export */   \"__classPrivateFieldGet\": () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   \"__classPrivateFieldSet\": () => (/* binding */ __classPrivateFieldSet)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nfunction __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tslib/tslib.es6.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});